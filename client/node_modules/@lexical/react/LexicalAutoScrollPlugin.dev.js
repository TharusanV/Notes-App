/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

var LexicalComposerContext = require('@lexical/react/LexicalComposerContext');
var lexical = require('lexical');
var react = require('react');

/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
const CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';

/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
const useLayoutEffectImpl = CAN_USE_DOM ? react.useLayoutEffect : react.useEffect;
var useLayoutEffect = useLayoutEffectImpl;

/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
function AutoScrollPlugin({
  scrollRef
}) {
  const [editor] = LexicalComposerContext.useLexicalComposerContext();
  useLayoutEffect(() => {
    return editor.registerUpdateListener(({
      tags,
      editorState
    }) => {
      const scrollElement = scrollRef.current;

      if (scrollElement === null || !tags.has('scroll-into-view')) {
        return;
      }

      const selection = editorState.read(() => lexical.$getSelection());

      if (!lexical.$isRangeSelection(selection) || !selection.isCollapsed()) {
        return;
      }

      const anchorElement = editor.getElementByKey(selection.anchor.key);

      if (anchorElement === null) {
        return;
      }

      const scrollRect = scrollElement.getBoundingClientRect();
      const rect = anchorElement.getBoundingClientRect();

      if (rect.bottom > scrollRect.bottom) {
        anchorElement.scrollIntoView(false);
      } else if (rect.top < scrollRect.top) {
        anchorElement.scrollIntoView();
      }
    });
  }, [editor, scrollRef]);
  return null;
}

exports.AutoScrollPlugin = AutoScrollPlugin;
