/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

var link = require('@lexical/link');
var LexicalComposerContext = require('@lexical/react/LexicalComposerContext');
var utils = require('@lexical/utils');
var lexical = require('lexical');
var react = require('react');

/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function findFirstMatch(text, matchers) {
  for (let i = 0; i < matchers.length; i++) {
    const match = matchers[i](text);

    if (match) {
      return match;
    }
  }

  return null;
}

function isPreviousNodeValid(node) {
  let previousNode = node.getPreviousSibling();

  if (lexical.$isElementNode(previousNode)) {
    previousNode = previousNode.getLastDescendant();
  }

  return previousNode === null || lexical.$isLineBreakNode(previousNode) || lexical.$isTextNode(previousNode) && previousNode.getTextContent().endsWith(' ');
}

function isNextNodeValid(node) {
  let nextNode = node.getNextSibling();

  if (lexical.$isElementNode(nextNode)) {
    nextNode = nextNode.getFirstDescendant();
  }

  return nextNode === null || lexical.$isLineBreakNode(nextNode) || lexical.$isTextNode(nextNode) && nextNode.getTextContent().startsWith(' ');
}

function handleLinkCreation(node, matchers, onChange) {
  const nodeText = node.getTextContent();
  const nodeTextLength = nodeText.length;
  let text = nodeText;
  let textOffset = 0;
  let lastNode = node;
  let match;

  while ((match = findFirstMatch(text, matchers)) && match !== null) {
    const matchOffset = match.index;
    const offset = textOffset + matchOffset;
    const matchLength = match.length; // Previous node is valid if any of:
    // 1. Space before same node
    // 2. Space in previous simple text node
    // 3. Previous node is LineBreakNode

    let contentBeforeMatchIsValid;

    if (offset > 0) {
      contentBeforeMatchIsValid = nodeText[offset - 1] === ' ';
    } else {
      contentBeforeMatchIsValid = isPreviousNodeValid(node);
    } // Next node is valid if any of:
    // 1. Space after same node
    // 2. Space in next simple text node
    // 3. Next node is LineBreakNode


    let contentAfterMatchIsValid;

    if (offset + matchLength < nodeTextLength) {
      contentAfterMatchIsValid = nodeText[offset + matchLength] === ' ';
    } else {
      contentAfterMatchIsValid = isNextNodeValid(node);
    }

    if (contentBeforeMatchIsValid && contentAfterMatchIsValid) {
      let middleNode;

      if (matchOffset === 0) {
        [middleNode, lastNode] = lastNode.splitText(matchLength);
      } else {
        [, middleNode, lastNode] = lastNode.splitText(matchOffset, matchOffset + matchLength);
      }

      const nodeFormat = node.__format;
      const linkNode = link.$createAutoLinkNode(match.url);
      linkNode.append(lexical.$createTextNode(match.text).setFormat(nodeFormat));
      middleNode.replace(linkNode);
      onChange(match.url, null);
    }

    const iterationOffset = matchOffset + matchLength;
    text = text.substring(iterationOffset);
    textOffset += iterationOffset;
  }
}

function handleLinkEdit(linkNode, matchers, onChange) {
  // Check children are simple text
  const children = linkNode.getChildren();
  const childrenLength = children.length;

  for (let i = 0; i < childrenLength; i++) {
    const child = children[i];

    if (!lexical.$isTextNode(child) || !child.isSimpleText()) {
      replaceWithChildren(linkNode);
      onChange(null, linkNode.getURL());
      return;
    }
  } // Check text content fully matches


  const text = linkNode.getTextContent();
  const match = findFirstMatch(text, matchers);

  if (match === null || match.text !== text) {
    replaceWithChildren(linkNode);
    onChange(null, linkNode.getURL());
    return;
  } // Check neighbors


  if (!isPreviousNodeValid(linkNode) || !isNextNodeValid(linkNode)) {
    replaceWithChildren(linkNode);
    onChange(null, linkNode.getURL());
    return;
  }

  const url = linkNode.getURL();

  if (match !== null && url !== match.url) {
    linkNode.setURL(match.url);
    onChange(match.url, url);
  }
} // Bad neighbours are edits in neighbor nodes that make AutoLinks incompatible.
// Given the creation preconditions, these can only be simple text nodes.


function handleBadNeighbors(textNode, onChange) {
  const previousSibling = textNode.getPreviousSibling();
  const nextSibling = textNode.getNextSibling();
  const text = textNode.getTextContent();

  if (link.$isAutoLinkNode(previousSibling) && !text.startsWith(' ')) {
    replaceWithChildren(previousSibling);
    onChange(null, previousSibling.getURL());
  }

  if (link.$isAutoLinkNode(nextSibling) && !text.endsWith(' ')) {
    replaceWithChildren(nextSibling);
    onChange(null, nextSibling.getURL());
  }
}

function replaceWithChildren(node) {
  const children = node.getChildren();
  const childrenLength = children.length;

  for (let j = childrenLength - 1; j >= 0; j--) {
    node.insertAfter(children[j]);
  }

  node.remove();
  return children.map(child => child.getLatest());
}

function useAutoLink(editor, matchers, onChange) {
  react.useEffect(() => {
    if (!editor.hasNodes([link.AutoLinkNode])) {
      {
        throw Error(`LexicalAutoLinkPlugin: AutoLinkNode not registered on editor`);
      }
    }

    const onChangeWrapped = (url, prevUrl) => {
      if (onChange) {
        onChange(url, prevUrl);
      }
    };

    return utils.mergeRegister(editor.registerNodeTransform(lexical.TextNode, textNode => {
      const parent = textNode.getParentOrThrow();

      if (link.$isAutoLinkNode(parent)) {
        handleLinkEdit(parent, matchers, onChangeWrapped);
      } else if (!link.$isLinkNode(parent)) {
        if (textNode.isSimpleText()) {
          handleLinkCreation(textNode, matchers, onChangeWrapped);
        }

        handleBadNeighbors(textNode, onChangeWrapped);
      }
    }), editor.registerNodeTransform(link.AutoLinkNode, linkNode => {
      handleLinkEdit(linkNode, matchers, onChangeWrapped);
    }));
  }, [editor, matchers, onChange]);
}

function AutoLinkPlugin({
  matchers,
  onChange
}) {
  const [editor] = LexicalComposerContext.useLexicalComposerContext();
  useAutoLink(editor, matchers, onChange);
  return null;
}

exports.AutoLinkPlugin = AutoLinkPlugin;
