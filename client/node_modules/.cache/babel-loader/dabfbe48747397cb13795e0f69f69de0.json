{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { types } from 'micromark-util-symbol/types.js';\n\n/**\r\n * @param {Effects} effects\r\n * @param {State} ok\r\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? types.linePrefix : types.lineSuffix)(code);\n    }\n    return ok(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","markdownSpace","types","factoryWhitespace","effects","ok","seen","start","code","enter","lineEnding","consume","exit","linePrefix","lineSuffix"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/node_modules/micromark-factory-whitespace/dev/index.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\n\r\n/**\r\n * @param {Effects} effects\r\n * @param {State} ok\r\n */\r\nexport function factoryWhitespace(effects, ok) {\r\n  /** @type {boolean} */\r\n  let seen\r\n\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      seen = true\r\n      return start\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(\r\n        effects,\r\n        start,\r\n        seen ? types.linePrefix : types.lineSuffix\r\n      )(code)\r\n    }\r\n\r\n    return ok(code)\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAAQA,YAAY,QAAO,yBAAyB;AACpD,SAAQC,kBAAkB,EAAEC,aAAa,QAAO,0BAA0B;AAC1E,SAAQC,KAAK,QAAO,gCAAgC;;AAEpD;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiB,CAACC,OAAO,EAAEC,EAAE,EAAE;EAC7C;EACA,IAAIC,IAAI;EAER,OAAOC,KAAK;;EAEZ;EACA,SAASA,KAAK,CAACC,IAAI,EAAE;IACnB,IAAIR,kBAAkB,CAACQ,IAAI,CAAC,EAAE;MAC5BJ,OAAO,CAACK,KAAK,CAACP,KAAK,CAACQ,UAAU,CAAC;MAC/BN,OAAO,CAACO,OAAO,CAACH,IAAI,CAAC;MACrBJ,OAAO,CAACQ,IAAI,CAACV,KAAK,CAACQ,UAAU,CAAC;MAC9BJ,IAAI,GAAG,IAAI;MACX,OAAOC,KAAK;IACd;IAEA,IAAIN,aAAa,CAACO,IAAI,CAAC,EAAE;MACvB,OAAOT,YAAY,CACjBK,OAAO,EACPG,KAAK,EACLD,IAAI,GAAGJ,KAAK,CAACW,UAAU,GAAGX,KAAK,CAACY,UAAU,CAC3C,CAACN,IAAI,CAAC;IACT;IAEA,OAAOH,EAAE,CAACG,IAAI,CAAC;EACjB;AACF"},"metadata":{},"sourceType":"module"}