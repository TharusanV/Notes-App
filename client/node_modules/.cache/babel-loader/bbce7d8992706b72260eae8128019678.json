{"ast":null,"code":"/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Position} Position\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {Record<string, unknown> & {type: string, position?: Position|undefined}} NodeLike\r\n * @typedef {import('./minurl.shared.js').URL} URL\r\n * @typedef {import('../index.js').Data} Data\r\n * @typedef {import('../index.js').Value} Value\r\n *\r\n * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'base64url'|'latin1'|'binary'|'hex'} BufferEncoding\r\n *   Encodings supported by the buffer class.\r\n *   This is a copy of the typing from Node, copied to prevent Node globals from\r\n *   being needed.\r\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\r\n *\r\n * @typedef {Value|Options|VFile|URL} Compatible\r\n *   Things that can be passed to the constructor.\r\n *\r\n * @typedef VFileCoreOptions\r\n * @property {Value} [value]\r\n * @property {string} [cwd]\r\n * @property {Array<string>} [history]\r\n * @property {string|URL} [path]\r\n * @property {string} [basename]\r\n * @property {string} [stem]\r\n * @property {string} [extname]\r\n * @property {string} [dirname]\r\n * @property {Data} [data]\r\n *\r\n * @typedef Map\r\n *   Raw source map, see:\r\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\r\n * @property {number} version\r\n * @property {Array<string>} sources\r\n * @property {Array<string>} names\r\n * @property {string|undefined} [sourceRoot]\r\n * @property {Array<string>|undefined} [sourcesContent]\r\n * @property {string} mappings\r\n * @property {string} file\r\n *\r\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\r\n *   Configuration: a bunch of keys that will be shallow copied over to the new\r\n *   file.\r\n *\r\n * @typedef {Record<string, unknown>} ReporterSettings\r\n * @typedef {<T = ReporterSettings>(files: Array<VFile>, options: T) => string} Reporter\r\n */\n\nimport buffer from 'is-buffer';\nimport { VFileMessage } from 'vfile-message';\nimport { path } from './minpath.js';\nimport { proc } from './minproc.js';\nimport { urlToPath, isUrl } from './minurl.js';\n\n// Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];\nexport class VFile {\n  /**\r\n   * Create a new virtual file.\r\n   *\r\n   * If `options` is `string` or `Buffer`, it’s treated as `{value: options}`.\r\n   * If `options` is a `URL`, it’s treated as `{path: options}`.\r\n   * If `options` is a `VFile`, shallow copies its data over to the new file.\r\n   * All fields in `options` are set on the newly created `VFile`.\r\n   *\r\n   * Path related fields are set in the following order (least specific to\r\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\r\n   * `dirname`.\r\n   *\r\n   * It’s not possible to set either `dirname` or `extname` without setting\r\n   * either `history`, `path`, `basename`, or `stem` as well.\r\n   *\r\n   * @param {Compatible} [value]\r\n   */\n  constructor(value) {\n    /** @type {Options} */\n    let options;\n    if (!value) {\n      options = {};\n    } else if (typeof value === 'string' || buffer(value)) {\n      // @ts-expect-error Looks like a buffer.\n      options = {\n        value\n      };\n    } else if (isUrl(value)) {\n      options = {\n        path: value\n      };\n    } else {\n      // @ts-expect-error Looks like file or options.\n      options = value;\n    }\n\n    /**\r\n     * Place to store custom information (default: `{}`).\r\n     * It’s OK to store custom data directly on the file but moving it to\r\n     * `data` is recommended.\r\n     * @type {Data}\r\n     */\n    this.data = {};\n\n    /**\r\n     * List of messages associated with the file.\r\n     * @type {Array<VFileMessage>}\r\n     */\n    this.messages = [];\n\n    /**\r\n     * List of filepaths the file moved between.\r\n     * The first is the original path and the last is the current path.\r\n     * @type {Array<string>}\r\n     */\n    this.history = [];\n\n    /**\r\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\r\n     * @type {string}\r\n     */\n    this.cwd = proc.cwd();\n\n    /* eslint-disable no-unused-expressions */\n    /**\r\n     * Raw value.\r\n     * @type {Value}\r\n     */\n    this.value;\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\r\n     * Whether a file was saved to disk.\r\n     * This is used by vfile reporters.\r\n     * @type {boolean}\r\n     */\n    this.stored;\n\n    /**\r\n     * Sometimes files have a non-string, compiled, representation.\r\n     * This can be stored in the `result` field.\r\n     * One example is when turning markdown into React nodes.\r\n     * This is used by unified to store non-string results.\r\n     * @type {unknown}\r\n     */\n    this.result;\n\n    /**\r\n     * Sometimes files have a source map associated with them.\r\n     * This can be stored in the `map` field.\r\n     * This should be a `Map` type, which is equivalent to the `RawSourceMap`\r\n     * type from the `source-map` module.\r\n     * @type {Map|undefined}\r\n     */\n    this.map;\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1;\n    while (++index < order.length) {\n      const prop = order[index];\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (prop in options && options[prop] !== undefined) {\n        // @ts-expect-error: TS is confused by the different types for `history`.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop];\n      }\n    }\n\n    /** @type {string} */\n    let prop;\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) this[prop] = options[prop];\n    }\n  }\n\n  /**\r\n   * Get the full path (example: `'~/index.min.js'`).\r\n   * @returns {string}\r\n   */\n  get path() {\n    return this.history[this.history.length - 1];\n  }\n\n  /**\r\n   * Set the full path (example: `'~/index.min.js'`).\r\n   * Cannot be nullified.\r\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\r\n   * be turned into a path with `url.fileURLToPath`.\r\n   * @param {string|URL} path\r\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path);\n    }\n    assertNonEmpty(path, 'path');\n    if (this.path !== path) {\n      this.history.push(path);\n    }\n  }\n\n  /**\r\n   * Get the parent path (example: `'~'`).\r\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined;\n  }\n\n  /**\r\n   * Set the parent path (example: `'~'`).\r\n   * Cannot be set if there’s no `path` yet.\r\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname');\n    this.path = path.join(dirname || '', this.basename);\n  }\n\n  /**\r\n   * Get the basename (including extname) (example: `'index.min.js'`).\r\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined;\n  }\n\n  /**\r\n   * Set basename (including extname) (`'index.min.js'`).\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename');\n    assertPart(basename, 'basename');\n    this.path = path.join(this.dirname || '', basename);\n  }\n\n  /**\r\n   * Get the extname (including dot) (example: `'.js'`).\r\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined;\n  }\n\n  /**\r\n   * Set the extname (including dot) (example: `'.js'`).\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be set if there’s no `path` yet.\r\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname');\n    assertPath(this.dirname, 'extname');\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`');\n      }\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots');\n      }\n    }\n    this.path = path.join(this.dirname, this.stem + (extname || ''));\n  }\n\n  /**\r\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\r\n   */\n  get stem() {\n    return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;\n  }\n\n  /**\r\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem');\n    assertPart(stem, 'stem');\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''));\n  }\n\n  /**\r\n   * Serialize the file.\r\n   *\r\n   * @param {BufferEncoding} [encoding='utf8']\r\n   *   When `value` is a `Buffer`, `encoding` is a character encoding to\r\n   *   understand it as (default: `'utf8'`).\r\n   * @returns {string}\r\n   *   Serialized file.\r\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding);\n  }\n\n  /**\r\n   * Constructs a new `VFileMessage`, where `fatal` is set to `false`, and\r\n   * associates it with the file by adding it to `vfile.messages` and setting\r\n   * `message.file` to the current filepath.\r\n   *\r\n   * @param {string|Error} reason\r\n   *   Human readable reason for the message, uses the stack and message of the error if given.\r\n   * @param {Node|NodeLike|Position|Point} [place]\r\n   *   Place where the message occurred in the file.\r\n   * @param {string} [origin]\r\n   *   Computer readable reason for the message\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin);\n    if (this.path) {\n      message.name = this.path + ':' + message.name;\n      message.file = this.path;\n    }\n    message.fatal = false;\n    this.messages.push(message);\n    return message;\n  }\n\n  /**\r\n   * Like `VFile#message()`, but associates an informational message where\r\n   * `fatal` is set to `null`.\r\n   *\r\n   * @param {string|Error} reason\r\n   *   Human readable reason for the message, uses the stack and message of the error if given.\r\n   * @param {Node|NodeLike|Position|Point} [place]\r\n   *   Place where the message occurred in the file.\r\n   * @param {string} [origin]\r\n   *   Computer readable reason for the message\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin);\n    message.fatal = null;\n    return message;\n  }\n\n  /**\r\n   * Like `VFile#message()`, but associates a fatal message where `fatal` is\r\n   * set to `true`, and then immediately throws it.\r\n   *\r\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\r\n   *\r\n   * @param {string|Error} reason\r\n   *   Human readable reason for the message, uses the stack and message of the error if given.\r\n   * @param {Node|NodeLike|Position|Point} [place]\r\n   *   Place where the message occurred in the file.\r\n   * @param {string} [origin]\r\n   *   Computer readable reason for the message\r\n   * @returns {never}\r\n   *   Message.\r\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin);\n    message.fatal = true;\n    throw message;\n  }\n}\n\n/**\r\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\r\n *\r\n * @param {string|undefined} part\r\n * @param {string} name\r\n * @returns {void}\r\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');\n  }\n}\n\n/**\r\n * Assert that `part` is not empty.\r\n *\r\n * @param {string|undefined} part\r\n * @param {string} name\r\n * @returns {asserts part is string}\r\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n}\n\n/**\r\n * Assert `path` exists.\r\n *\r\n * @param {string|undefined} path\r\n * @param {string} name\r\n * @returns {asserts path is string}\r\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}","map":{"version":3,"names":["buffer","VFileMessage","path","proc","urlToPath","isUrl","order","VFile","constructor","value","options","data","messages","history","cwd","stored","result","map","index","length","prop","undefined","includes","assertNonEmpty","push","dirname","assertPath","basename","join","assertPart","extname","charCodeAt","Error","stem","toString","encoding","message","reason","place","origin","name","file","fatal","info","fail","part","sep"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/node_modules/vfile/lib/index.js"],"sourcesContent":["/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Position} Position\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {Record<string, unknown> & {type: string, position?: Position|undefined}} NodeLike\r\n * @typedef {import('./minurl.shared.js').URL} URL\r\n * @typedef {import('../index.js').Data} Data\r\n * @typedef {import('../index.js').Value} Value\r\n *\r\n * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'base64url'|'latin1'|'binary'|'hex'} BufferEncoding\r\n *   Encodings supported by the buffer class.\r\n *   This is a copy of the typing from Node, copied to prevent Node globals from\r\n *   being needed.\r\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\r\n *\r\n * @typedef {Value|Options|VFile|URL} Compatible\r\n *   Things that can be passed to the constructor.\r\n *\r\n * @typedef VFileCoreOptions\r\n * @property {Value} [value]\r\n * @property {string} [cwd]\r\n * @property {Array<string>} [history]\r\n * @property {string|URL} [path]\r\n * @property {string} [basename]\r\n * @property {string} [stem]\r\n * @property {string} [extname]\r\n * @property {string} [dirname]\r\n * @property {Data} [data]\r\n *\r\n * @typedef Map\r\n *   Raw source map, see:\r\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\r\n * @property {number} version\r\n * @property {Array<string>} sources\r\n * @property {Array<string>} names\r\n * @property {string|undefined} [sourceRoot]\r\n * @property {Array<string>|undefined} [sourcesContent]\r\n * @property {string} mappings\r\n * @property {string} file\r\n *\r\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\r\n *   Configuration: a bunch of keys that will be shallow copied over to the new\r\n *   file.\r\n *\r\n * @typedef {Record<string, unknown>} ReporterSettings\r\n * @typedef {<T = ReporterSettings>(files: Array<VFile>, options: T) => string} Reporter\r\n */\r\n\r\nimport buffer from 'is-buffer'\r\nimport {VFileMessage} from 'vfile-message'\r\nimport {path} from './minpath.js'\r\nimport {proc} from './minproc.js'\r\nimport {urlToPath, isUrl} from './minurl.js'\r\n\r\n// Order of setting (least specific to most), we need this because otherwise\r\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\r\n// stem can be set.\r\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\r\n\r\nexport class VFile {\r\n  /**\r\n   * Create a new virtual file.\r\n   *\r\n   * If `options` is `string` or `Buffer`, it’s treated as `{value: options}`.\r\n   * If `options` is a `URL`, it’s treated as `{path: options}`.\r\n   * If `options` is a `VFile`, shallow copies its data over to the new file.\r\n   * All fields in `options` are set on the newly created `VFile`.\r\n   *\r\n   * Path related fields are set in the following order (least specific to\r\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\r\n   * `dirname`.\r\n   *\r\n   * It’s not possible to set either `dirname` or `extname` without setting\r\n   * either `history`, `path`, `basename`, or `stem` as well.\r\n   *\r\n   * @param {Compatible} [value]\r\n   */\r\n  constructor(value) {\r\n    /** @type {Options} */\r\n    let options\r\n\r\n    if (!value) {\r\n      options = {}\r\n    } else if (typeof value === 'string' || buffer(value)) {\r\n      // @ts-expect-error Looks like a buffer.\r\n      options = {value}\r\n    } else if (isUrl(value)) {\r\n      options = {path: value}\r\n    } else {\r\n      // @ts-expect-error Looks like file or options.\r\n      options = value\r\n    }\r\n\r\n    /**\r\n     * Place to store custom information (default: `{}`).\r\n     * It’s OK to store custom data directly on the file but moving it to\r\n     * `data` is recommended.\r\n     * @type {Data}\r\n     */\r\n    this.data = {}\r\n\r\n    /**\r\n     * List of messages associated with the file.\r\n     * @type {Array<VFileMessage>}\r\n     */\r\n    this.messages = []\r\n\r\n    /**\r\n     * List of filepaths the file moved between.\r\n     * The first is the original path and the last is the current path.\r\n     * @type {Array<string>}\r\n     */\r\n    this.history = []\r\n\r\n    /**\r\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\r\n     * @type {string}\r\n     */\r\n    this.cwd = proc.cwd()\r\n\r\n    /* eslint-disable no-unused-expressions */\r\n    /**\r\n     * Raw value.\r\n     * @type {Value}\r\n     */\r\n    this.value\r\n\r\n    // The below are non-standard, they are “well-known”.\r\n    // As in, used in several tools.\r\n\r\n    /**\r\n     * Whether a file was saved to disk.\r\n     * This is used by vfile reporters.\r\n     * @type {boolean}\r\n     */\r\n    this.stored\r\n\r\n    /**\r\n     * Sometimes files have a non-string, compiled, representation.\r\n     * This can be stored in the `result` field.\r\n     * One example is when turning markdown into React nodes.\r\n     * This is used by unified to store non-string results.\r\n     * @type {unknown}\r\n     */\r\n    this.result\r\n\r\n    /**\r\n     * Sometimes files have a source map associated with them.\r\n     * This can be stored in the `map` field.\r\n     * This should be a `Map` type, which is equivalent to the `RawSourceMap`\r\n     * type from the `source-map` module.\r\n     * @type {Map|undefined}\r\n     */\r\n    this.map\r\n    /* eslint-enable no-unused-expressions */\r\n\r\n    // Set path related properties in the correct order.\r\n    let index = -1\r\n\r\n    while (++index < order.length) {\r\n      const prop = order[index]\r\n\r\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\r\n      // `vfile`s too.\r\n      if (prop in options && options[prop] !== undefined) {\r\n        // @ts-expect-error: TS is confused by the different types for `history`.\r\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\r\n      }\r\n    }\r\n\r\n    /** @type {string} */\r\n    let prop\r\n\r\n    // Set non-path related properties.\r\n    for (prop in options) {\r\n      // @ts-expect-error: fine to set other things.\r\n      if (!order.includes(prop)) this[prop] = options[prop]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the full path (example: `'~/index.min.js'`).\r\n   * @returns {string}\r\n   */\r\n  get path() {\r\n    return this.history[this.history.length - 1]\r\n  }\r\n\r\n  /**\r\n   * Set the full path (example: `'~/index.min.js'`).\r\n   * Cannot be nullified.\r\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\r\n   * be turned into a path with `url.fileURLToPath`.\r\n   * @param {string|URL} path\r\n   */\r\n  set path(path) {\r\n    if (isUrl(path)) {\r\n      path = urlToPath(path)\r\n    }\r\n\r\n    assertNonEmpty(path, 'path')\r\n\r\n    if (this.path !== path) {\r\n      this.history.push(path)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the parent path (example: `'~'`).\r\n   */\r\n  get dirname() {\r\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the parent path (example: `'~'`).\r\n   * Cannot be set if there’s no `path` yet.\r\n   */\r\n  set dirname(dirname) {\r\n    assertPath(this.basename, 'dirname')\r\n    this.path = path.join(dirname || '', this.basename)\r\n  }\r\n\r\n  /**\r\n   * Get the basename (including extname) (example: `'index.min.js'`).\r\n   */\r\n  get basename() {\r\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\r\n  }\r\n\r\n  /**\r\n   * Set basename (including extname) (`'index.min.js'`).\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   */\r\n  set basename(basename) {\r\n    assertNonEmpty(basename, 'basename')\r\n    assertPart(basename, 'basename')\r\n    this.path = path.join(this.dirname || '', basename)\r\n  }\r\n\r\n  /**\r\n   * Get the extname (including dot) (example: `'.js'`).\r\n   */\r\n  get extname() {\r\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the extname (including dot) (example: `'.js'`).\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be set if there’s no `path` yet.\r\n   */\r\n  set extname(extname) {\r\n    assertPart(extname, 'extname')\r\n    assertPath(this.dirname, 'extname')\r\n\r\n    if (extname) {\r\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\r\n        throw new Error('`extname` must start with `.`')\r\n      }\r\n\r\n      if (extname.includes('.', 1)) {\r\n        throw new Error('`extname` cannot contain multiple dots')\r\n      }\r\n    }\r\n\r\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\r\n  }\r\n\r\n  /**\r\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\r\n   */\r\n  get stem() {\r\n    return typeof this.path === 'string'\r\n      ? path.basename(this.path, this.extname)\r\n      : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   */\r\n  set stem(stem) {\r\n    assertNonEmpty(stem, 'stem')\r\n    assertPart(stem, 'stem')\r\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\r\n  }\r\n\r\n  /**\r\n   * Serialize the file.\r\n   *\r\n   * @param {BufferEncoding} [encoding='utf8']\r\n   *   When `value` is a `Buffer`, `encoding` is a character encoding to\r\n   *   understand it as (default: `'utf8'`).\r\n   * @returns {string}\r\n   *   Serialized file.\r\n   */\r\n  toString(encoding) {\r\n    return (this.value || '').toString(encoding)\r\n  }\r\n\r\n  /**\r\n   * Constructs a new `VFileMessage`, where `fatal` is set to `false`, and\r\n   * associates it with the file by adding it to `vfile.messages` and setting\r\n   * `message.file` to the current filepath.\r\n   *\r\n   * @param {string|Error} reason\r\n   *   Human readable reason for the message, uses the stack and message of the error if given.\r\n   * @param {Node|NodeLike|Position|Point} [place]\r\n   *   Place where the message occurred in the file.\r\n   * @param {string} [origin]\r\n   *   Computer readable reason for the message\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\r\n  message(reason, place, origin) {\r\n    const message = new VFileMessage(reason, place, origin)\r\n\r\n    if (this.path) {\r\n      message.name = this.path + ':' + message.name\r\n      message.file = this.path\r\n    }\r\n\r\n    message.fatal = false\r\n\r\n    this.messages.push(message)\r\n\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Like `VFile#message()`, but associates an informational message where\r\n   * `fatal` is set to `null`.\r\n   *\r\n   * @param {string|Error} reason\r\n   *   Human readable reason for the message, uses the stack and message of the error if given.\r\n   * @param {Node|NodeLike|Position|Point} [place]\r\n   *   Place where the message occurred in the file.\r\n   * @param {string} [origin]\r\n   *   Computer readable reason for the message\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\r\n  info(reason, place, origin) {\r\n    const message = this.message(reason, place, origin)\r\n\r\n    message.fatal = null\r\n\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Like `VFile#message()`, but associates a fatal message where `fatal` is\r\n   * set to `true`, and then immediately throws it.\r\n   *\r\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\r\n   *\r\n   * @param {string|Error} reason\r\n   *   Human readable reason for the message, uses the stack and message of the error if given.\r\n   * @param {Node|NodeLike|Position|Point} [place]\r\n   *   Place where the message occurred in the file.\r\n   * @param {string} [origin]\r\n   *   Computer readable reason for the message\r\n   * @returns {never}\r\n   *   Message.\r\n   */\r\n  fail(reason, place, origin) {\r\n    const message = this.message(reason, place, origin)\r\n\r\n    message.fatal = true\r\n\r\n    throw message\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\r\n *\r\n * @param {string|undefined} part\r\n * @param {string} name\r\n * @returns {void}\r\n */\r\nfunction assertPart(part, name) {\r\n  if (part && part.includes(path.sep)) {\r\n    throw new Error(\r\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `part` is not empty.\r\n *\r\n * @param {string|undefined} part\r\n * @param {string} name\r\n * @returns {asserts part is string}\r\n */\r\nfunction assertNonEmpty(part, name) {\r\n  if (!part) {\r\n    throw new Error('`' + name + '` cannot be empty')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert `path` exists.\r\n *\r\n * @param {string|undefined} path\r\n * @param {string} name\r\n * @returns {asserts path is string}\r\n */\r\nfunction assertPath(path, name) {\r\n  if (!path) {\r\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}