{"ast":null,"code":"import { codes } from 'micromark-util-symbol/codes.js';\nimport { values } from 'micromark-util-symbol/values.js';\n\n/**\r\n * Turn the number (in string form as either hexa- or plain decimal) coming from\r\n * a numeric character reference into a character.\r\n *\r\n * @param {string} value\r\n *   Value to decode.\r\n * @param {number} base\r\n *   Numeric base.\r\n * @returns {string}\r\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space\n  code < codes.ht || code === codes.vt || code > codes.cr && code < codes.space ||\n  // Control character (DEL) of the basic block and C1 controls.\n  code > codes.tilde && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55295 && code < 57344 ||\n  // Noncharacters.\n  code > 64975 && code < 65008 || (code & 65535) === 65535 || (code & 65535) === 65534 ||\n  // Out of range\n  code > 1114111) {\n    return values.replacementCharacter;\n  }\n  return String.fromCharCode(code);\n}","map":{"version":3,"names":["codes","values","decodeNumericCharacterReference","value","base","code","Number","parseInt","ht","vt","cr","space","tilde","replacementCharacter","String","fromCharCode"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js"],"sourcesContent":["import {codes} from 'micromark-util-symbol/codes.js'\r\nimport {values} from 'micromark-util-symbol/values.js'\r\n\r\n/**\r\n * Turn the number (in string form as either hexa- or plain decimal) coming from\r\n * a numeric character reference into a character.\r\n *\r\n * @param {string} value\r\n *   Value to decode.\r\n * @param {number} base\r\n *   Numeric base.\r\n * @returns {string}\r\n */\r\nexport function decodeNumericCharacterReference(value, base) {\r\n  const code = Number.parseInt(value, base)\r\n\r\n  if (\r\n    // C0 except for HT, LF, FF, CR, space\r\n    code < codes.ht ||\r\n    code === codes.vt ||\r\n    (code > codes.cr && code < codes.space) ||\r\n    // Control character (DEL) of the basic block and C1 controls.\r\n    (code > codes.tilde && code < 160) ||\r\n    // Lone high surrogates and low surrogates.\r\n    (code > 55295 && code < 57344) ||\r\n    // Noncharacters.\r\n    (code > 64975 && code < 65008) ||\r\n    (code & 65535) === 65535 ||\r\n    (code & 65535) === 65534 ||\r\n    // Out of range\r\n    code > 1114111\r\n  ) {\r\n    return values.replacementCharacter\r\n  }\r\n\r\n  return String.fromCharCode(code)\r\n}\r\n"],"mappings":"AAAA,SAAQA,KAAK,QAAO,gCAAgC;AACpD,SAAQC,MAAM,QAAO,iCAAiC;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,+BAA+B,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC3D,MAAMC,IAAI,GAAGC,MAAM,CAACC,QAAQ,CAACJ,KAAK,EAAEC,IAAI,CAAC;EAEzC;EACE;EACAC,IAAI,GAAGL,KAAK,CAACQ,EAAE,IACfH,IAAI,KAAKL,KAAK,CAACS,EAAE,IAChBJ,IAAI,GAAGL,KAAK,CAACU,EAAE,IAAIL,IAAI,GAAGL,KAAK,CAACW,KAAM;EACvC;EACCN,IAAI,GAAGL,KAAK,CAACY,KAAK,IAAIP,IAAI,GAAG,GAAI;EAClC;EACCA,IAAI,GAAG,KAAK,IAAIA,IAAI,GAAG,KAAM;EAC9B;EACCA,IAAI,GAAG,KAAK,IAAIA,IAAI,GAAG,KAAM,IAC9B,CAACA,IAAI,GAAG,KAAK,MAAM,KAAK,IACxB,CAACA,IAAI,GAAG,KAAK,MAAM,KAAK;EACxB;EACAA,IAAI,GAAG,OAAO,EACd;IACA,OAAOJ,MAAM,CAACY,oBAAoB;EACpC;EAEA,OAAOC,MAAM,CAACC,YAAY,CAACV,IAAI,CAAC;AAClC"},"metadata":{},"sourceType":"module"}