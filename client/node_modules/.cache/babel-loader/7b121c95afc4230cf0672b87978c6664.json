{"ast":null,"code":"/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Position} Position\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\r\n */\n\nimport { stringifyPosition } from 'unist-util-stringify-position';\nexport class VFileMessage extends Error {\n  /**\r\n   * Constructor of a message for `reason` at `place` from `origin`.\r\n   * When an error is passed in as `reason`, copies the `stack`.\r\n   *\r\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\r\n   * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\r\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\r\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string|null, string|null]} */\n    const parts = [null, null];\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {\n        line: null,\n        column: null\n      },\n      // @ts-expect-error: \"\n      end: {\n        line: null,\n        column: null\n      }\n    };\n    super();\n    if (typeof place === 'string') {\n      origin = place;\n      place = undefined;\n    }\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':');\n      if (index === -1) {\n        parts[1] = origin;\n      } else {\n        parts[0] = origin.slice(0, index);\n        parts[1] = origin.slice(index + 1);\n      }\n    }\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          position = place.position;\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        position = place;\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        position.start = place;\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1';\n    this.message = typeof reason === 'object' ? reason.message : reason;\n    this.stack = typeof reason === 'object' ? reason.stack : '';\n\n    /**\r\n     * Reason for message.\r\n     * @type {string}\r\n     */\n    this.reason = this.message;\n    /**\r\n     * If true, marks associated file as no longer processable.\r\n     * @type {boolean?}\r\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.fatal;\n    /**\r\n     * Starting line of error.\r\n     * @type {number?}\r\n     */\n    this.line = position.start.line;\n    /**\r\n     * Starting column of error.\r\n     * @type {number?}\r\n     */\n    this.column = position.start.column;\n    /**\r\n     * Namespace of warning.\r\n     * @type {string?}\r\n     */\n    this.source = parts[0];\n    /**\r\n     * Category of message.\r\n     * @type {string?}\r\n     */\n    this.ruleId = parts[1];\n    /**\r\n     * Full range information, when available.\r\n     * Has start and end properties, both set to an object with line and column, set to number?.\r\n     * @type {Position?}\r\n     */\n    this.position = position;\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /* eslint-disable no-unused-expressions */\n    /**\r\n     * You can use this to specify the source value that’s being reported, which\r\n     * is deemed incorrect.\r\n     * @type {string?}\r\n     */\n    this.actual;\n    /**\r\n     * You can use this to suggest values that should be used instead of\r\n     * `actual`, one or more values that are deemed as acceptable.\r\n     * @type {Array<string>?}\r\n     */\n    this.expected;\n    /**\r\n     * You may add a file property with a path of a file (used throughout the VFile ecosystem).\r\n     * @type {string?}\r\n     */\n    this.file;\n    /**\r\n     * You may add a url property with a link to documentation for the message.\r\n     * @type {string?}\r\n     */\n    this.url;\n    /**\r\n     * You may add a note property with a long form description of the message (supported by vfile-reporter).\r\n     * @type {string?}\r\n     */\n    this.note;\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = '';\nVFileMessage.prototype.name = '';\nVFileMessage.prototype.reason = '';\nVFileMessage.prototype.message = '';\nVFileMessage.prototype.stack = '';\nVFileMessage.prototype.fatal = null;\nVFileMessage.prototype.column = null;\nVFileMessage.prototype.line = null;\nVFileMessage.prototype.source = null;\nVFileMessage.prototype.ruleId = null;\nVFileMessage.prototype.position = null;","map":{"version":3,"names":["stringifyPosition","VFileMessage","Error","constructor","reason","place","origin","parts","position","start","line","column","end","undefined","index","indexOf","slice","name","message","stack","fatal","source","ruleId","actual","expected","file","url","note","prototype"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/node_modules/vfile-message/index.js"],"sourcesContent":["/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Position} Position\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\r\n */\r\n\r\nimport {stringifyPosition} from 'unist-util-stringify-position'\r\n\r\nexport class VFileMessage extends Error {\r\n  /**\r\n   * Constructor of a message for `reason` at `place` from `origin`.\r\n   * When an error is passed in as `reason`, copies the `stack`.\r\n   *\r\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\r\n   * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\r\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\r\n   */\r\n  constructor(reason, place, origin) {\r\n    /** @type {[string|null, string|null]} */\r\n    const parts = [null, null]\r\n    /** @type {Position} */\r\n    let position = {\r\n      // @ts-expect-error: we always follows the structure of `position`.\r\n      start: {line: null, column: null},\r\n      // @ts-expect-error: \"\r\n      end: {line: null, column: null}\r\n    }\r\n\r\n    super()\r\n\r\n    if (typeof place === 'string') {\r\n      origin = place\r\n      place = undefined\r\n    }\r\n\r\n    if (typeof origin === 'string') {\r\n      const index = origin.indexOf(':')\r\n\r\n      if (index === -1) {\r\n        parts[1] = origin\r\n      } else {\r\n        parts[0] = origin.slice(0, index)\r\n        parts[1] = origin.slice(index + 1)\r\n      }\r\n    }\r\n\r\n    if (place) {\r\n      // Node.\r\n      if ('type' in place || 'position' in place) {\r\n        if (place.position) {\r\n          position = place.position\r\n        }\r\n      }\r\n      // Position.\r\n      else if ('start' in place || 'end' in place) {\r\n        position = place\r\n      }\r\n      // Point.\r\n      else if ('line' in place || 'column' in place) {\r\n        position.start = place\r\n      }\r\n    }\r\n\r\n    // Fields from `Error`\r\n    this.name = stringifyPosition(place) || '1:1'\r\n    this.message = typeof reason === 'object' ? reason.message : reason\r\n    this.stack = typeof reason === 'object' ? reason.stack : ''\r\n\r\n    /**\r\n     * Reason for message.\r\n     * @type {string}\r\n     */\r\n    this.reason = this.message\r\n    /**\r\n     * If true, marks associated file as no longer processable.\r\n     * @type {boolean?}\r\n     */\r\n    // eslint-disable-next-line no-unused-expressions\r\n    this.fatal\r\n    /**\r\n     * Starting line of error.\r\n     * @type {number?}\r\n     */\r\n    this.line = position.start.line\r\n    /**\r\n     * Starting column of error.\r\n     * @type {number?}\r\n     */\r\n    this.column = position.start.column\r\n    /**\r\n     * Namespace of warning.\r\n     * @type {string?}\r\n     */\r\n    this.source = parts[0]\r\n    /**\r\n     * Category of message.\r\n     * @type {string?}\r\n     */\r\n    this.ruleId = parts[1]\r\n    /**\r\n     * Full range information, when available.\r\n     * Has start and end properties, both set to an object with line and column, set to number?.\r\n     * @type {Position?}\r\n     */\r\n    this.position = position\r\n\r\n    // The following fields are “well known”.\r\n    // Not standard.\r\n    // Feel free to add other non-standard fields to your messages.\r\n\r\n    /* eslint-disable no-unused-expressions */\r\n    /**\r\n     * You can use this to specify the source value that’s being reported, which\r\n     * is deemed incorrect.\r\n     * @type {string?}\r\n     */\r\n    this.actual\r\n    /**\r\n     * You can use this to suggest values that should be used instead of\r\n     * `actual`, one or more values that are deemed as acceptable.\r\n     * @type {Array<string>?}\r\n     */\r\n    this.expected\r\n    /**\r\n     * You may add a file property with a path of a file (used throughout the VFile ecosystem).\r\n     * @type {string?}\r\n     */\r\n    this.file\r\n    /**\r\n     * You may add a url property with a link to documentation for the message.\r\n     * @type {string?}\r\n     */\r\n    this.url\r\n    /**\r\n     * You may add a note property with a long form description of the message (supported by vfile-reporter).\r\n     * @type {string?}\r\n     */\r\n    this.note\r\n    /* eslint-enable no-unused-expressions */\r\n  }\r\n}\r\n\r\nVFileMessage.prototype.file = ''\r\nVFileMessage.prototype.name = ''\r\nVFileMessage.prototype.reason = ''\r\nVFileMessage.prototype.message = ''\r\nVFileMessage.prototype.stack = ''\r\nVFileMessage.prototype.fatal = null\r\nVFileMessage.prototype.column = null\r\nVFileMessage.prototype.line = null\r\nVFileMessage.prototype.source = null\r\nVFileMessage.prototype.ruleId = null\r\nVFileMessage.prototype.position = null\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}