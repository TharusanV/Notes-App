{"ast":null,"code":"import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core';\nconst inputRegex = /^\\s*([-+*])\\s$/;\nconst BulletList = Node.create({\n  name: 'bulletList',\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {}\n    };\n  },\n  group: 'block list',\n  content() {\n    return `${this.options.itemTypeName}+`;\n  },\n  parseHTML() {\n    return [{\n      tag: 'ul'\n    }];\n  },\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      toggleBulletList: () => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.toggleList(this.name, this.options.itemTypeName);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-8': () => this.editor.commands.toggleBulletList()\n    };\n  },\n  addInputRules() {\n    return [wrappingInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  }\n});\nexport { BulletList, BulletList as default, inputRegex };","map":{"version":3,"mappings":";AAkBO,MAAMA,UAAU,GAAG;AAEb,gBAAU,GAAGC,IAAI,CAACC,MAAM,CAAoB;EACvDC,IAAI,EAAE,YAAY;EAElBC,UAAU;IACR,OAAO;MACLC,YAAY,EAAE,UAAU;MACxBC,cAAc,EAAE;KACjB;GACF;EAEDC,KAAK,EAAE,YAAY;EAEnBC,OAAO;IACL,OAAO,GAAG,IAAI,CAACC,OAAO,CAACJ,YAAY,GAAG;GACvC;EAEDK,SAAS;IACP,OAAO,CACL;MAAEC,GAAG,EAAE;IAAI,CAAE,CACd;GACF;EAEDC,UAAU,OAAmB;IAAA,IAAlB;MAAEN;IAAc,CAAE;IAC3B,OAAO,CAAC,IAAI,EAAEO,eAAe,CAAC,IAAI,CAACJ,OAAO,CAACH,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GAC/E;EAEDQ,WAAW;IACT,OAAO;MACLC,gBAAgB,EAAE,MAAM,SAAiB;QAAA,IAAhB;UAAEC;QAAQ,CAAE;QACnC,OAAOA,QAAQ,CAACC,UAAU,CAAC,IAAI,CAACd,IAAI,EAAE,IAAI,CAACM,OAAO,CAACJ,YAAY,CAAC;;KAEnE;GACF;EAEDa,oBAAoB;IAClB,OAAO;MACL,aAAa,EAAE,MAAM,IAAI,CAACC,MAAM,CAACH,QAAQ,CAACD,gBAAgB;KAC3D;GACF;EAEDK,aAAa;IACX,OAAO,CACLC,iBAAiB,CAAC;MAChBC,IAAI,EAAEtB,UAAU;MAChBuB,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;;AAEJ","names":["inputRegex","Node","create","name","addOptions","itemTypeName","HTMLAttributes","group","content","options","parseHTML","tag","renderHTML","mergeAttributes","addCommands","toggleBulletList","commands","toggleList","addKeyboardShortcuts","editor","addInputRules","wrappingInputRule","find","type"],"sources":["E:\\0TUser18\\Downloads\\Projects\\Notes App\\client\\node_modules\\@tiptap\\extension-bullet-list\\src\\bullet-list.ts"],"sourcesContent":["import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nexport interface BulletListOptions {\n  itemTypeName: string,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    bulletList: {\n      /**\n       * Toggle a bullet list\n       */\n      toggleBulletList: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /^\\s*([-+*])\\s$/\n\nexport const BulletList = Node.create<BulletListOptions>({\n  name: 'bulletList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  parseHTML() {\n    return [\n      { tag: 'ul' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleBulletList: () => ({ commands }) => {\n        return commands.toggleList(this.name, this.options.itemTypeName)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-8': () => this.editor.commands.toggleBulletList(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}