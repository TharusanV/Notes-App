{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n * @typedef {import('micromark-util-types').State} State\r\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n\n/** @type {Tokenizer} */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.exclamationMark, 'expected `!`');\n    effects.enter(types.labelImage);\n    effects.enter(types.labelImageMarker);\n    effects.consume(code);\n    effects.exit(types.labelImageMarker);\n    return open;\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (code === codes.leftSquareBracket) {\n      effects.enter(types.labelMarker);\n      effects.consume(code);\n      effects.exit(types.labelMarker);\n      effects.exit(types.labelImage);\n      return after;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\r\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\r\n     * which doesn’t need this */\n    /* Hidden footnotes hook */\n    /* c8 ignore next 3 */\n    return code === codes.caret && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","map":{"version":3,"names":["ok","assert","codes","types","labelEnd","labelStartImage","name","tokenize","tokenizeLabelStartImage","resolveAll","effects","nok","self","start","code","exclamationMark","enter","labelImage","labelImageMarker","consume","exit","open","leftSquareBracket","labelMarker","after","caret","parser","constructs"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/node_modules/micromark-core-commonmark/dev/lib/label-start-image.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n * @typedef {import('micromark-util-types').State} State\r\n */\r\n\r\nimport {ok as assert} from 'uvu/assert'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {labelEnd} from './label-end.js'\r\n\r\n/** @type {Construct} */\r\nexport const labelStartImage = {\r\n  name: 'labelStartImage',\r\n  tokenize: tokenizeLabelStartImage,\r\n  resolveAll: labelEnd.resolveAll\r\n}\r\n\r\n/** @type {Tokenizer} */\r\nfunction tokenizeLabelStartImage(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    assert(code === codes.exclamationMark, 'expected `!`')\r\n    effects.enter(types.labelImage)\r\n    effects.enter(types.labelImageMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.labelImageMarker)\r\n    return open\r\n  }\r\n\r\n  /** @type {State} */\r\n  function open(code) {\r\n    if (code === codes.leftSquareBracket) {\r\n      effects.enter(types.labelMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.labelMarker)\r\n      effects.exit(types.labelImage)\r\n      return after\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function after(code) {\r\n    /* To do: remove in the future once we’ve switched from\r\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\r\n     * which doesn’t need this */\r\n    /* Hidden footnotes hook */\r\n    /* c8 ignore next 3 */\r\n    return code === codes.caret &&\r\n      '_hiddenFootnoteSupport' in self.parser.constructs\r\n      ? nok(code)\r\n      : ok(code)\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,EAAE,IAAIC,MAAM,QAAO,YAAY;AACvC,SAAQC,KAAK,QAAO,gCAAgC;AACpD,SAAQC,KAAK,QAAO,gCAAgC;AACpD,SAAQC,QAAQ,QAAO,gBAAgB;;AAEvC;AACA,OAAO,MAAMC,eAAe,GAAG;EAC7BC,IAAI,EAAE,iBAAiB;EACvBC,QAAQ,EAAEC,uBAAuB;EACjCC,UAAU,EAAEL,QAAQ,CAACK;AACvB,CAAC;;AAED;AACA,SAASD,uBAAuB,CAACE,OAAO,EAAEV,EAAE,EAAEW,GAAG,EAAE;EACjD,MAAMC,IAAI,GAAG,IAAI;EAEjB,OAAOC,KAAK;;EAEZ;EACA,SAASA,KAAK,CAACC,IAAI,EAAE;IACnBb,MAAM,CAACa,IAAI,KAAKZ,KAAK,CAACa,eAAe,EAAE,cAAc,CAAC;IACtDL,OAAO,CAACM,KAAK,CAACb,KAAK,CAACc,UAAU,CAAC;IAC/BP,OAAO,CAACM,KAAK,CAACb,KAAK,CAACe,gBAAgB,CAAC;IACrCR,OAAO,CAACS,OAAO,CAACL,IAAI,CAAC;IACrBJ,OAAO,CAACU,IAAI,CAACjB,KAAK,CAACe,gBAAgB,CAAC;IACpC,OAAOG,IAAI;EACb;;EAEA;EACA,SAASA,IAAI,CAACP,IAAI,EAAE;IAClB,IAAIA,IAAI,KAAKZ,KAAK,CAACoB,iBAAiB,EAAE;MACpCZ,OAAO,CAACM,KAAK,CAACb,KAAK,CAACoB,WAAW,CAAC;MAChCb,OAAO,CAACS,OAAO,CAACL,IAAI,CAAC;MACrBJ,OAAO,CAACU,IAAI,CAACjB,KAAK,CAACoB,WAAW,CAAC;MAC/Bb,OAAO,CAACU,IAAI,CAACjB,KAAK,CAACc,UAAU,CAAC;MAC9B,OAAOO,KAAK;IACd;IAEA,OAAOb,GAAG,CAACG,IAAI,CAAC;EAClB;;EAEA;EACA,SAASU,KAAK,CAACV,IAAI,EAAE;IACnB;AACJ;AACA;IACI;IACA;IACA,OAAOA,IAAI,KAAKZ,KAAK,CAACuB,KAAK,IACzB,wBAAwB,IAAIb,IAAI,CAACc,MAAM,CAACC,UAAU,GAChDhB,GAAG,CAACG,IAAI,CAAC,GACTd,EAAE,CAACc,IAAI,CAAC;EACd;AACF"},"metadata":{},"sourceType":"module"}