{"ast":null,"code":"/**\r\n * @typedef {Object} StringifyOptions\r\n * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).\r\n * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).\r\n */\n\n/**\r\n * Parse comma separated tokens to an array.\r\n *\r\n * @param {string} value\r\n * @returns {Array.<string>}\r\n */\nexport function parse(value) {\n  /** @type {Array.<string>} */\n  var tokens = [];\n  var input = String(value || '');\n  var index = input.indexOf(',');\n  var start = 0;\n  /** @type {boolean} */\n  var end;\n  /** @type {string} */\n  var token;\n  while (!end) {\n    if (index === -1) {\n      index = input.length;\n      end = true;\n    }\n    token = input.slice(start, index).trim();\n    if (token || !end) {\n      tokens.push(token);\n    }\n    start = index + 1;\n    index = input.indexOf(',', start);\n  }\n  return tokens;\n}\n\n/**\r\n * Serialize an array of strings to comma separated tokens.\r\n *\r\n * @param {Array.<string|number>} values\r\n * @param {StringifyOptions} [options]\r\n * @returns {string}\r\n */\nexport function stringify(values, options) {\n  var settings = options || {};\n\n  // Ensure the last empty entry is seen.\n  if (values[values.length - 1] === '') {\n    values = values.concat('');\n  }\n  return values.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();\n}","map":{"version":3,"names":["parse","value","tokens","input","String","index","indexOf","start","end","token","length","slice","trim","push","stringify","values","options","settings","concat","join","padRight","padLeft"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/node_modules/comma-separated-tokens/index.js"],"sourcesContent":["/**\r\n * @typedef {Object} StringifyOptions\r\n * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).\r\n * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).\r\n */\r\n\r\n/**\r\n * Parse comma separated tokens to an array.\r\n *\r\n * @param {string} value\r\n * @returns {Array.<string>}\r\n */\r\nexport function parse(value) {\r\n  /** @type {Array.<string>} */\r\n  var tokens = []\r\n  var input = String(value || '')\r\n  var index = input.indexOf(',')\r\n  var start = 0\r\n  /** @type {boolean} */\r\n  var end\r\n  /** @type {string} */\r\n  var token\r\n\r\n  while (!end) {\r\n    if (index === -1) {\r\n      index = input.length\r\n      end = true\r\n    }\r\n\r\n    token = input.slice(start, index).trim()\r\n\r\n    if (token || !end) {\r\n      tokens.push(token)\r\n    }\r\n\r\n    start = index + 1\r\n    index = input.indexOf(',', start)\r\n  }\r\n\r\n  return tokens\r\n}\r\n\r\n/**\r\n * Serialize an array of strings to comma separated tokens.\r\n *\r\n * @param {Array.<string|number>} values\r\n * @param {StringifyOptions} [options]\r\n * @returns {string}\r\n */\r\nexport function stringify(values, options) {\r\n  var settings = options || {}\r\n\r\n  // Ensure the last empty entry is seen.\r\n  if (values[values.length - 1] === '') {\r\n    values = values.concat('')\r\n  }\r\n\r\n  return values\r\n    .join(\r\n      (settings.padRight ? ' ' : '') +\r\n        ',' +\r\n        (settings.padLeft === false ? '' : ' ')\r\n    )\r\n    .trim()\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,KAAK,CAACC,KAAK,EAAE;EAC3B;EACA,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,KAAK,GAAGC,MAAM,CAACH,KAAK,IAAI,EAAE,CAAC;EAC/B,IAAII,KAAK,GAAGF,KAAK,CAACG,OAAO,CAAC,GAAG,CAAC;EAC9B,IAAIC,KAAK,GAAG,CAAC;EACb;EACA,IAAIC,GAAG;EACP;EACA,IAAIC,KAAK;EAET,OAAO,CAACD,GAAG,EAAE;IACX,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;MAChBA,KAAK,GAAGF,KAAK,CAACO,MAAM;MACpBF,GAAG,GAAG,IAAI;IACZ;IAEAC,KAAK,GAAGN,KAAK,CAACQ,KAAK,CAACJ,KAAK,EAAEF,KAAK,CAAC,CAACO,IAAI,EAAE;IAExC,IAAIH,KAAK,IAAI,CAACD,GAAG,EAAE;MACjBN,MAAM,CAACW,IAAI,CAACJ,KAAK,CAAC;IACpB;IAEAF,KAAK,GAAGF,KAAK,GAAG,CAAC;IACjBA,KAAK,GAAGF,KAAK,CAACG,OAAO,CAAC,GAAG,EAAEC,KAAK,CAAC;EACnC;EAEA,OAAOL,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,SAAS,CAACC,MAAM,EAAEC,OAAO,EAAE;EACzC,IAAIC,QAAQ,GAAGD,OAAO,IAAI,CAAC,CAAC;;EAE5B;EACA,IAAID,MAAM,CAACA,MAAM,CAACL,MAAM,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;IACpCK,MAAM,GAAGA,MAAM,CAACG,MAAM,CAAC,EAAE,CAAC;EAC5B;EAEA,OAAOH,MAAM,CACVI,IAAI,CACH,CAACF,QAAQ,CAACG,QAAQ,GAAG,GAAG,GAAG,EAAE,IAC3B,GAAG,IACFH,QAAQ,CAACI,OAAO,KAAK,KAAK,GAAG,EAAE,GAAG,GAAG,CAAC,CAC1C,CACAT,IAAI,EAAE;AACX"},"metadata":{},"sourceType":"module"}