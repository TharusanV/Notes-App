{"ast":null,"code":"/**\r\n * @typedef Options\r\n * @property {boolean} [includeImageAlt=true]\r\n */\n\n/**\r\n * Get the text content of a node.\r\n * Prefer the node’s plain-text fields, otherwise serialize its children,\r\n * and if the given value is an array, serialize the nodes in it.\r\n *\r\n * @param {unknown} node\r\n * @param {Options} [options]\r\n * @returns {string}\r\n */\nexport function toString(node, options) {\n  var {\n    includeImageAlt = true\n  } = options || {};\n  return one(node, includeImageAlt);\n}\n\n/**\r\n * @param {unknown} node\r\n * @param {boolean} includeImageAlt\r\n * @returns {string}\r\n */\nfunction one(node, includeImageAlt) {\n  return node && typeof node === 'object' && (\n  // @ts-ignore looks like a literal.\n  node.value || (\n  // @ts-ignore looks like an image.\n  includeImageAlt ? node.alt : '') ||\n  // @ts-ignore looks like a parent.\n  'children' in node && all(node.children, includeImageAlt) || Array.isArray(node) && all(node, includeImageAlt)) || '';\n}\n\n/**\r\n * @param {Array.<unknown>} values\r\n * @param {boolean} includeImageAlt\r\n * @returns {string}\r\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = [];\n  var index = -1;\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt);\n  }\n  return result.join('');\n}","map":{"version":3,"names":["toString","node","options","includeImageAlt","one","value","alt","all","children","Array","isArray","values","result","index","length","join"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/node_modules/mdast-util-to-string/index.js"],"sourcesContent":["/**\r\n * @typedef Options\r\n * @property {boolean} [includeImageAlt=true]\r\n */\r\n\r\n/**\r\n * Get the text content of a node.\r\n * Prefer the node’s plain-text fields, otherwise serialize its children,\r\n * and if the given value is an array, serialize the nodes in it.\r\n *\r\n * @param {unknown} node\r\n * @param {Options} [options]\r\n * @returns {string}\r\n */\r\nexport function toString(node, options) {\r\n  var {includeImageAlt = true} = options || {}\r\n  return one(node, includeImageAlt)\r\n}\r\n\r\n/**\r\n * @param {unknown} node\r\n * @param {boolean} includeImageAlt\r\n * @returns {string}\r\n */\r\nfunction one(node, includeImageAlt) {\r\n  return (\r\n    (node &&\r\n      typeof node === 'object' &&\r\n      // @ts-ignore looks like a literal.\r\n      (node.value ||\r\n        // @ts-ignore looks like an image.\r\n        (includeImageAlt ? node.alt : '') ||\r\n        // @ts-ignore looks like a parent.\r\n        ('children' in node && all(node.children, includeImageAlt)) ||\r\n        (Array.isArray(node) && all(node, includeImageAlt)))) ||\r\n    ''\r\n  )\r\n}\r\n\r\n/**\r\n * @param {Array.<unknown>} values\r\n * @param {boolean} includeImageAlt\r\n * @returns {string}\r\n */\r\nfunction all(values, includeImageAlt) {\r\n  /** @type {Array.<string>} */\r\n  var result = []\r\n  var index = -1\r\n\r\n  while (++index < values.length) {\r\n    result[index] = one(values[index], includeImageAlt)\r\n  }\r\n\r\n  return result.join('')\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAQ,CAACC,IAAI,EAAEC,OAAO,EAAE;EACtC,IAAI;IAACC,eAAe,GAAG;EAAI,CAAC,GAAGD,OAAO,IAAI,CAAC,CAAC;EAC5C,OAAOE,GAAG,CAACH,IAAI,EAAEE,eAAe,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,GAAG,CAACH,IAAI,EAAEE,eAAe,EAAE;EAClC,OACGF,IAAI,IACH,OAAOA,IAAI,KAAK,QAAQ;EACxB;EACCA,IAAI,CAACI,KAAK;EACT;EACCF,eAAe,GAAGF,IAAI,CAACK,GAAG,GAAG,EAAE,CAAC;EACjC;EACC,UAAU,IAAIL,IAAI,IAAIM,GAAG,CAACN,IAAI,CAACO,QAAQ,EAAEL,eAAe,CAAE,IAC1DM,KAAK,CAACC,OAAO,CAACT,IAAI,CAAC,IAAIM,GAAG,CAACN,IAAI,EAAEE,eAAe,CAAE,CAAC,IACxD,EAAE;AAEN;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASI,GAAG,CAACI,MAAM,EAAER,eAAe,EAAE;EACpC;EACA,IAAIS,MAAM,GAAG,EAAE;EACf,IAAIC,KAAK,GAAG,CAAC,CAAC;EAEd,OAAO,EAAEA,KAAK,GAAGF,MAAM,CAACG,MAAM,EAAE;IAC9BF,MAAM,CAACC,KAAK,CAAC,GAAGT,GAAG,CAACO,MAAM,CAACE,KAAK,CAAC,EAAEV,eAAe,CAAC;EACrD;EAEA,OAAOS,MAAM,CAACG,IAAI,CAAC,EAAE,CAAC;AACxB"},"metadata":{},"sourceType":"module"}