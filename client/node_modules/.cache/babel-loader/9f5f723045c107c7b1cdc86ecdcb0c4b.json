{"ast":null,"code":"import { posToDOMRect, Extension } from '@tiptap/core';\nimport { Plugin, PluginKey } from 'prosemirror-state';\nimport tippy from 'tippy.js';\nclass FloatingMenuView {\n  constructor(_ref) {\n    let {\n      editor,\n      element,\n      view,\n      tippyOptions = {},\n      shouldShow\n    } = _ref;\n    this.preventHide = false;\n    this.shouldShow = _ref2 => {\n      let {\n        view,\n        state\n      } = _ref2;\n      const {\n        selection\n      } = state;\n      const {\n        $anchor,\n        empty\n      } = selection;\n      const isRootDepth = $anchor.depth === 1;\n      const isEmptyTextBlock = $anchor.parent.isTextblock && !$anchor.parent.type.spec.code && !$anchor.parent.textContent;\n      if (!view.hasFocus() || !empty || !isRootDepth || !isEmptyTextBlock || !this.editor.isEditable) {\n        return false;\n      }\n      return true;\n    };\n    this.mousedownHandler = () => {\n      this.preventHide = true;\n    };\n    this.focusHandler = () => {\n      // we use `setTimeout` to make sure `selection` is already updated\n      setTimeout(() => this.update(this.editor.view));\n    };\n    this.blurHandler = _ref3 => {\n      let {\n        event\n      } = _ref3;\n      var _a;\n      if (this.preventHide) {\n        this.preventHide = false;\n        return;\n      }\n      if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n        return;\n      }\n      this.hide();\n    };\n    this.editor = editor;\n    this.element = element;\n    this.view = view;\n    if (shouldShow) {\n      this.shouldShow = shouldShow;\n    }\n    this.element.addEventListener('mousedown', this.mousedownHandler, {\n      capture: true\n    });\n    this.editor.on('focus', this.focusHandler);\n    this.editor.on('blur', this.blurHandler);\n    this.tippyOptions = tippyOptions;\n    // Detaches menu content from its current parent\n    this.element.remove();\n    this.element.style.visibility = 'visible';\n  }\n  createTooltip() {\n    const {\n      element: editorElement\n    } = this.editor.options;\n    const editorIsAttached = !!editorElement.parentElement;\n    if (this.tippy || !editorIsAttached) {\n      return;\n    }\n    this.tippy = tippy(editorElement, {\n      duration: 0,\n      getReferenceClientRect: null,\n      content: this.element,\n      interactive: true,\n      trigger: 'manual',\n      placement: 'right',\n      hideOnClick: 'toggle',\n      ...this.tippyOptions\n    });\n    // maybe we have to hide tippy on its own blur event as well\n    if (this.tippy.popper.firstChild) {\n      this.tippy.popper.firstChild.addEventListener('blur', event => {\n        this.blurHandler({\n          event\n        });\n      });\n    }\n  }\n  update(view, oldState) {\n    var _a, _b, _c;\n    const {\n      state\n    } = view;\n    const {\n      doc,\n      selection\n    } = state;\n    const {\n      from,\n      to\n    } = selection;\n    const isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);\n    if (isSame) {\n      return;\n    }\n    this.createTooltip();\n    const shouldShow = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {\n      editor: this.editor,\n      view,\n      state,\n      oldState\n    });\n    if (!shouldShow) {\n      this.hide();\n      return;\n    }\n    (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({\n      getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect) || (() => posToDOMRect(view, from, to))\n    });\n    this.show();\n  }\n  show() {\n    var _a;\n    (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();\n  }\n  hide() {\n    var _a;\n    (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();\n  }\n  destroy() {\n    var _a;\n    (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.destroy();\n    this.element.removeEventListener('mousedown', this.mousedownHandler, {\n      capture: true\n    });\n    this.editor.off('focus', this.focusHandler);\n    this.editor.off('blur', this.blurHandler);\n  }\n}\nconst FloatingMenuPlugin = options => {\n  return new Plugin({\n    key: typeof options.pluginKey === 'string' ? new PluginKey(options.pluginKey) : options.pluginKey,\n    view: view => new FloatingMenuView({\n      view,\n      ...options\n    })\n  });\n};\nconst FloatingMenu = Extension.create({\n  name: 'floatingMenu',\n  addOptions() {\n    return {\n      element: null,\n      tippyOptions: {},\n      pluginKey: 'floatingMenu',\n      shouldShow: null\n    };\n  },\n  addProseMirrorPlugins() {\n    if (!this.options.element) {\n      return [];\n    }\n    return [FloatingMenuPlugin({\n      pluginKey: this.options.pluginKey,\n      editor: this.editor,\n      element: this.options.element,\n      tippyOptions: this.options.tippyOptions,\n      shouldShow: this.options.shouldShow\n    })];\n  }\n});\nexport { FloatingMenu, FloatingMenuPlugin, FloatingMenuView, FloatingMenu as default };","map":{"version":3,"mappings":"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","names":["FloatingMenuView","constructor","editor","element","view","tippyOptions","shouldShow","state","selection","$anchor","empty","isRootDepth","depth","isEmptyTextBlock","parent","isTextblock","type","spec","code","textContent","hasFocus","isEditable","preventHide","setTimeout","update","event","relatedTarget","parentNode","contains","hide","addEventListener","mousedownHandler","capture","on","focusHandler","blurHandler","remove","style","visibility","createTooltip","editorElement","options","editorIsAttached","parentElement","tippy","duration","getReferenceClientRect","content","interactive","trigger","placement","hideOnClick","popper","firstChild","oldState","doc","from","to","isSame","eq","setProps","posToDOMRect","show","destroy","removeEventListener","off","Plugin","key","pluginKey","PluginKey","Extension","create","name","addOptions","addProseMirrorPlugins","FloatingMenuPlugin"],"sources":["E:\\0TUser18\\Downloads\\Projects\\Notes App\\client\\node_modules\\@tiptap\\extension-floating-menu\\src\\floating-menu-plugin.ts","E:\\0TUser18\\Downloads\\Projects\\Notes App\\client\\node_modules\\@tiptap\\extension-floating-menu\\src\\floating-menu.ts"],"sourcesContent":["import { Editor, posToDOMRect } from '@tiptap/core'\nimport { EditorState, Plugin, PluginKey } from 'prosemirror-state'\nimport { EditorView } from 'prosemirror-view'\nimport tippy, { Instance, Props } from 'tippy.js'\n\nexport interface FloatingMenuPluginProps {\n  pluginKey: PluginKey | string,\n  editor: Editor,\n  element: HTMLElement,\n  tippyOptions?: Partial<Props>,\n  shouldShow?: ((props: {\n    editor: Editor,\n    view: EditorView,\n    state: EditorState,\n    oldState?: EditorState,\n  }) => boolean) | null,\n}\n\nexport type FloatingMenuViewProps = FloatingMenuPluginProps & {\n  view: EditorView,\n}\n\nexport class FloatingMenuView {\n  public editor: Editor\n\n  public element: HTMLElement\n\n  public view: EditorView\n\n  public preventHide = false\n\n  public tippy: Instance | undefined\n\n  public tippyOptions?: Partial<Props>\n\n  public shouldShow: Exclude<FloatingMenuPluginProps['shouldShow'], null> = ({ view, state }) => {\n    const { selection } = state\n    const { $anchor, empty } = selection\n    const isRootDepth = $anchor.depth === 1\n    const isEmptyTextBlock = $anchor.parent.isTextblock\n      && !$anchor.parent.type.spec.code\n      && !$anchor.parent.textContent\n\n    if (\n      !view.hasFocus()\n      || !empty\n      || !isRootDepth\n      || !isEmptyTextBlock\n      || !this.editor.isEditable\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  constructor({\n    editor,\n    element,\n    view,\n    tippyOptions = {},\n    shouldShow,\n  }: FloatingMenuViewProps) {\n    this.editor = editor\n    this.element = element\n    this.view = view\n\n    if (shouldShow) {\n      this.shouldShow = shouldShow\n    }\n\n    this.element.addEventListener('mousedown', this.mousedownHandler, { capture: true })\n    this.editor.on('focus', this.focusHandler)\n    this.editor.on('blur', this.blurHandler)\n    this.tippyOptions = tippyOptions\n    // Detaches menu content from its current parent\n    this.element.remove()\n    this.element.style.visibility = 'visible'\n  }\n\n  mousedownHandler = () => {\n    this.preventHide = true\n  }\n\n  focusHandler = () => {\n    // we use `setTimeout` to make sure `selection` is already updated\n    setTimeout(() => this.update(this.editor.view))\n  }\n\n  blurHandler = ({ event }: { event: FocusEvent }) => {\n    if (this.preventHide) {\n      this.preventHide = false\n\n      return\n    }\n\n    if (\n      event?.relatedTarget\n      && this.element.parentNode?.contains(event.relatedTarget as Node)\n    ) {\n      return\n    }\n\n    this.hide()\n  }\n\n  createTooltip() {\n    const { element: editorElement } = this.editor.options\n    const editorIsAttached = !!editorElement.parentElement\n\n    if (this.tippy || !editorIsAttached) {\n      return\n    }\n\n    this.tippy = tippy(editorElement, {\n      duration: 0,\n      getReferenceClientRect: null,\n      content: this.element,\n      interactive: true,\n      trigger: 'manual',\n      placement: 'right',\n      hideOnClick: 'toggle',\n      ...this.tippyOptions,\n    })\n\n    // maybe we have to hide tippy on its own blur event as well\n    if (this.tippy.popper.firstChild) {\n      (this.tippy.popper.firstChild as HTMLElement).addEventListener('blur', event => {\n        this.blurHandler({ event })\n      })\n    }\n  }\n\n  update(view: EditorView, oldState?: EditorState) {\n    const { state } = view\n    const { doc, selection } = state\n    const { from, to } = selection\n    const isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection)\n\n    if (isSame) {\n      return\n    }\n\n    this.createTooltip()\n\n    const shouldShow = this.shouldShow?.({\n      editor: this.editor,\n      view,\n      state,\n      oldState,\n    })\n\n    if (!shouldShow) {\n      this.hide()\n\n      return\n    }\n\n    this.tippy?.setProps({\n      getReferenceClientRect: this.tippyOptions?.getReferenceClientRect || (() => posToDOMRect(view, from, to)),\n    })\n\n    this.show()\n  }\n\n  show() {\n    this.tippy?.show()\n  }\n\n  hide() {\n    this.tippy?.hide()\n  }\n\n  destroy() {\n    this.tippy?.destroy()\n    this.element.removeEventListener('mousedown', this.mousedownHandler, { capture: true })\n    this.editor.off('focus', this.focusHandler)\n    this.editor.off('blur', this.blurHandler)\n  }\n}\n\nexport const FloatingMenuPlugin = (options: FloatingMenuPluginProps) => {\n  return new Plugin({\n    key: typeof options.pluginKey === 'string'\n      ? new PluginKey(options.pluginKey)\n      : options.pluginKey,\n    view: view => new FloatingMenuView({ view, ...options }),\n  })\n}\n","import { Extension } from '@tiptap/core'\n\nimport { FloatingMenuPlugin, FloatingMenuPluginProps } from './floating-menu-plugin'\n\nexport type FloatingMenuOptions = Omit<FloatingMenuPluginProps, 'editor' | 'element'> & {\n  element: HTMLElement | null,\n}\n\nexport const FloatingMenu = Extension.create<FloatingMenuOptions>({\n  name: 'floatingMenu',\n\n  addOptions() {\n    return {\n      element: null,\n      tippyOptions: {},\n      pluginKey: 'floatingMenu',\n      shouldShow: null,\n    }\n  },\n\n  addProseMirrorPlugins() {\n    if (!this.options.element) {\n      return []\n    }\n\n    return [\n      FloatingMenuPlugin({\n        pluginKey: this.options.pluginKey,\n        editor: this.editor,\n        element: this.options.element,\n        tippyOptions: this.options.tippyOptions,\n        shouldShow: this.options.shouldShow,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}