{"ast":null,"code":"/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n * @typedef {import('unist-util-is').Test} Test\r\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\r\n * @typedef {import('./complex-types.js').Visitor} Visitor\r\n */\n\nimport { visitParents } from 'unist-util-visit-parents';\n\n/**\r\n * Visit children of tree which pass test.\r\n *\r\n * @param tree\r\n *   Tree to walk\r\n * @param [test]\r\n *   `unist-util-is`-compatible test\r\n * @param visitor\r\n *   Function called for nodes that pass `test`.\r\n * @param reverse\r\n *   Traverse in reverse preorder (NRL) instead of preorder (NLR) (default).\r\n */\nexport const visit =\n/**\r\n * @type {(\r\n *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types.js').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\r\n *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types.js').BuildVisitor<Tree>, reverse?: boolean) => void)\r\n * )}\r\n */\n\n/**\r\n * @param {Node} tree\r\n * @param {Test} test\r\n * @param {import('./complex-types.js').Visitor} visitor\r\n * @param {boolean} [reverse]\r\n */\nfunction (tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor;\n    visitor = test;\n    test = null;\n  }\n  visitParents(tree, test, overload, reverse);\n\n  /**\r\n   * @param {Node} node\r\n   * @param {Array<Parent>} parents\r\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1];\n    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);\n  }\n};\nexport { CONTINUE, EXIT, SKIP } from 'unist-util-visit-parents';","map":{"version":3,"names":["visitParents","visit","tree","test","visitor","reverse","overload","node","parents","parent","length","children","indexOf","CONTINUE","EXIT","SKIP"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/node_modules/unist-util-visit/index.js"],"sourcesContent":["/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n * @typedef {import('unist-util-is').Test} Test\r\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\r\n * @typedef {import('./complex-types.js').Visitor} Visitor\r\n */\r\n\r\nimport {visitParents} from 'unist-util-visit-parents'\r\n\r\n/**\r\n * Visit children of tree which pass test.\r\n *\r\n * @param tree\r\n *   Tree to walk\r\n * @param [test]\r\n *   `unist-util-is`-compatible test\r\n * @param visitor\r\n *   Function called for nodes that pass `test`.\r\n * @param reverse\r\n *   Traverse in reverse preorder (NRL) instead of preorder (NLR) (default).\r\n */\r\nexport const visit =\r\n  /**\r\n   * @type {(\r\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types.js').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\r\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types.js').BuildVisitor<Tree>, reverse?: boolean) => void)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Node} tree\r\n     * @param {Test} test\r\n     * @param {import('./complex-types.js').Visitor} visitor\r\n     * @param {boolean} [reverse]\r\n     */\r\n    function (tree, test, visitor, reverse) {\r\n      if (typeof test === 'function' && typeof visitor !== 'function') {\r\n        reverse = visitor\r\n        visitor = test\r\n        test = null\r\n      }\r\n\r\n      visitParents(tree, test, overload, reverse)\r\n\r\n      /**\r\n       * @param {Node} node\r\n       * @param {Array<Parent>} parents\r\n       */\r\n      function overload(node, parents) {\r\n        const parent = parents[parents.length - 1]\r\n        return visitor(\r\n          node,\r\n          parent ? parent.children.indexOf(node) : null,\r\n          parent\r\n        )\r\n      }\r\n    }\r\n  )\r\n\r\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,YAAY,QAAO,0BAA0B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,KAAK;AAChB;AACF;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACI,UAAUC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACtC,IAAI,OAAOF,IAAI,KAAK,UAAU,IAAI,OAAOC,OAAO,KAAK,UAAU,EAAE;IAC/DC,OAAO,GAAGD,OAAO;IACjBA,OAAO,GAAGD,IAAI;IACdA,IAAI,GAAG,IAAI;EACb;EAEAH,YAAY,CAACE,IAAI,EAAEC,IAAI,EAAEG,QAAQ,EAAED,OAAO,CAAC;;EAE3C;AACN;AACA;AACA;EACM,SAASC,QAAQ,CAACC,IAAI,EAAEC,OAAO,EAAE;IAC/B,MAAMC,MAAM,GAAGD,OAAO,CAACA,OAAO,CAACE,MAAM,GAAG,CAAC,CAAC;IAC1C,OAAON,OAAO,CACZG,IAAI,EACJE,MAAM,GAAGA,MAAM,CAACE,QAAQ,CAACC,OAAO,CAACL,IAAI,CAAC,GAAG,IAAI,EAC7CE,MAAM,CACP;EACH;AACF,CACD;AAEH,SAAQI,QAAQ,EAAEC,IAAI,EAAEC,IAAI,QAAO,0BAA0B"},"metadata":{},"sourceType":"module"}