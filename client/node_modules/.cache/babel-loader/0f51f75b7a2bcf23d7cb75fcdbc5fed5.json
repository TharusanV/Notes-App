{"ast":null,"code":"var _jsxFileName = \"E:\\\\0TUser18\\\\Downloads\\\\Projects\\\\Notes App\\\\client\\\\src\\\\components\\\\Editor.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Toolbar from './ToolBar';\nimport { useEditor, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport TextStyle from '@tiptap/extension-text-style';\nimport { Color } from '@tiptap/extension-color';\nimport FontFamily from '@tiptap/extension-font-family';\nimport Link from '@tiptap/extension-link';\nimport Highlight from '@tiptap/extension-highlight';\nimport CharacterCount from '@tiptap/extension-character-count';\nimport Underline from '@tiptap/extension-underline';\nimport { FontSize } from './Extentions/FontSize';\nimport jsPDF from 'jspdf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Editor = _ref => {\n  _s();\n  let {\n    prop_GetActiveNote,\n    prop_OnUpdateNote\n  } = _ref;\n  const [editorContent, setEditorContent] = useState(\"\");\n  const onEditField = (key, value) => {\n    prop_OnUpdateNote({\n      ...prop_GetActiveNote,\n      id: prop_GetActiveNote.id,\n      [key]: value,\n      lastModified: Date.now()\n    });\n  };\n  const editor = useEditor({\n    content: `<p></p>`,\n    extensions: [StarterKit, TextStyle, Color, CharacterCount, FontSize, Underline, FontFamily],\n    onUpdate(_ref2) {\n      let {\n        editor\n      } = _ref2;\n      setEditorContent(editor.getHTML());\n      onEditField(\"body\", editor.getText());\n    }\n  });\n  if (!editor) {\n    return null;\n  }\n  if (!prop_GetActiveNote) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"no-active-note\",\n    children: \"No selected note\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 34\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hero-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-note-editor-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"note-title\",\n        type: \"text\",\n        onChange: event => onEditField(\"title\", event.target.value),\n        autoFocus: true,\n        value: prop_GetActiveNote.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: /*#__PURE__*/_jsxDEV(Toolbar, {\n          editor: editor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-editor\",\n        children: /*#__PURE__*/_jsxDEV(EditorContent, {\n          editor: editor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Editor, \"Od/w94yzNlrvjWssJMGdJduuZwA=\", false, function () {\n  return [useEditor];\n});\n_c = Editor;\nexport default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["useState","Toolbar","useEditor","EditorContent","StarterKit","TextStyle","Color","FontFamily","Link","Highlight","CharacterCount","Underline","FontSize","jsPDF","Editor","prop_GetActiveNote","prop_OnUpdateNote","editorContent","setEditorContent","onEditField","key","value","id","lastModified","Date","now","editor","content","extensions","onUpdate","getHTML","getText","event","target","title"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/src/components/Editor.jsx"],"sourcesContent":["import { useState } from 'react'\r\nimport Toolbar from './ToolBar';\r\n\r\nimport { useEditor, EditorContent } from '@tiptap/react'\r\nimport StarterKit from '@tiptap/starter-kit'\r\nimport TextStyle from '@tiptap/extension-text-style'\r\nimport { Color } from '@tiptap/extension-color'\r\nimport FontFamily from '@tiptap/extension-font-family'\r\nimport Link from '@tiptap/extension-link'\r\nimport Highlight from '@tiptap/extension-highlight'\r\n\r\nimport CharacterCount from '@tiptap/extension-character-count'\r\nimport Underline from '@tiptap/extension-underline'\r\n\r\nimport { FontSize } from './Extentions/FontSize'\r\nimport jsPDF from 'jspdf';\r\n\r\nconst Editor = ( {prop_GetActiveNote, prop_OnUpdateNote}) => {\r\n \r\n  const [editorContent, setEditorContent] = useState(\"\");\r\n\r\n\r\n  const onEditField = (key, value) => {\r\n    prop_OnUpdateNote({\r\n      ...prop_GetActiveNote,\r\n      id: prop_GetActiveNote.id,\r\n      [key]: value,\r\n      lastModified: Date.now(),\r\n    })\r\n  };\r\n\r\n  const editor = useEditor({\r\n    content: `<p></p>`,\r\n    extensions: [\r\n      StarterKit, TextStyle, Color, CharacterCount, FontSize, \r\n      Underline, FontFamily,\r\n    ],\r\n    onUpdate({ editor}) {\r\n      setEditorContent(editor.getHTML());\r\n      onEditField(\"body\", editor.getText());\r\n    }\r\n  })\r\n\r\n  if (!editor) {\r\n    return null\r\n  }\r\n\r\n  if(!prop_GetActiveNote) return <div className='no-active-note'>No selected note</div>\r\n  \r\n\r\n  return (\r\n    <div className='hero-container'>\r\n      <div className='main-note-editor-container'>     \r\n        <input \r\n          id='note-title' \r\n          type='text' \r\n          onChange={(event) => onEditField(\"title\", event.target.value)} \r\n          autoFocus \r\n          value={prop_GetActiveNote.title} \r\n        />\r\n\r\n        <div className='toolbar'>\r\n          <Toolbar editor={editor}/>\r\n        </div>\r\n\r\n        <div className='main-editor'>\r\n          <EditorContent editor={editor}/> \r\n        </div>\r\n        \r\n      </div>\r\n    </div>\r\n\r\n\r\n      \r\n    \r\n    \r\n\r\n    \r\n  )\r\n}\r\n\r\nexport default Editor\r\n\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,OAAO,MAAM,WAAW;AAE/B,SAASC,SAAS,EAAEC,aAAa,QAAQ,eAAe;AACxD,OAAOC,UAAU,MAAM,qBAAqB;AAC5C,OAAOC,SAAS,MAAM,8BAA8B;AACpD,SAASC,KAAK,QAAQ,yBAAyB;AAC/C,OAAOC,UAAU,MAAM,+BAA+B;AACtD,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,SAAS,MAAM,6BAA6B;AAEnD,OAAOC,cAAc,MAAM,mCAAmC;AAC9D,OAAOC,SAAS,MAAM,6BAA6B;AAEnD,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,OAAOC,KAAK,MAAM,OAAO;AAAC;AAE1B,MAAMC,MAAM,GAAG,QAA8C;EAAA;EAAA,IAA5C;IAACC,kBAAkB;IAAEC;EAAiB,CAAC;EAEtD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAGtD,MAAMmB,WAAW,GAAG,CAACC,GAAG,EAAEC,KAAK,KAAK;IAClCL,iBAAiB,CAAC;MAChB,GAAGD,kBAAkB;MACrBO,EAAE,EAAEP,kBAAkB,CAACO,EAAE;MACzB,CAACF,GAAG,GAAGC,KAAK;MACZE,YAAY,EAAEC,IAAI,CAACC,GAAG;IACxB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,MAAM,GAAGxB,SAAS,CAAC;IACvByB,OAAO,EAAG,SAAQ;IAClBC,UAAU,EAAE,CACVxB,UAAU,EAAEC,SAAS,EAAEC,KAAK,EAAEI,cAAc,EAAEE,QAAQ,EACtDD,SAAS,EAAEJ,UAAU,CACtB;IACDsB,QAAQ,QAAY;MAAA,IAAX;QAAEH;MAAM,CAAC;MAChBR,gBAAgB,CAACQ,MAAM,CAACI,OAAO,EAAE,CAAC;MAClCX,WAAW,CAAC,MAAM,EAAEO,MAAM,CAACK,OAAO,EAAE,CAAC;IACvC;EACF,CAAC,CAAC;EAEF,IAAI,CAACL,MAAM,EAAE;IACX,OAAO,IAAI;EACb;EAEA,IAAG,CAACX,kBAAkB,EAAE,oBAAO;IAAK,SAAS,EAAC,gBAAgB;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAuB;EAGrF,oBACE;IAAK,SAAS,EAAC,gBAAgB;IAAA,uBAC7B;MAAK,SAAS,EAAC,4BAA4B;MAAA,wBACzC;QACE,EAAE,EAAC,YAAY;QACf,IAAI,EAAC,MAAM;QACX,QAAQ,EAAGiB,KAAK,IAAKb,WAAW,CAAC,OAAO,EAAEa,KAAK,CAACC,MAAM,CAACZ,KAAK,CAAE;QAC9D,SAAS;QACT,KAAK,EAAEN,kBAAkB,CAACmB;MAAM;QAAA;QAAA;QAAA;MAAA,QAChC,eAEF;QAAK,SAAS,EAAC,SAAS;QAAA,uBACtB,QAAC,OAAO;UAAC,MAAM,EAAER;QAAO;UAAA;UAAA;UAAA;QAAA;MAAE;QAAA;QAAA;QAAA;MAAA,QACtB,eAEN;QAAK,SAAS,EAAC,aAAa;QAAA,uBAC1B,QAAC,aAAa;UAAC,MAAM,EAAEA;QAAO;UAAA;UAAA;UAAA;QAAA;MAAE;QAAA;QAAA;QAAA;MAAA,QAC5B;IAAA;MAAA;MAAA;MAAA;IAAA;EAEF;IAAA;IAAA;IAAA;EAAA,QACF;AASV,CAAC;AAAA,GA9DKZ,MAAM;EAAA,QAcKZ,SAAS;AAAA;AAAA,KAdpBY,MAAM;AAgEZ,eAAeA,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module"}