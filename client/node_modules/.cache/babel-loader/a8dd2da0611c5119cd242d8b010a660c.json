{"ast":null,"code":"import { Extension } from '@tiptap/core';\nimport { Plugin, PluginKey } from 'prosemirror-state';\nconst CharacterCount = Extension.create({\n  name: 'characterCount',\n  addOptions() {\n    return {\n      limit: null,\n      mode: 'textSize'\n    };\n  },\n  addStorage() {\n    return {\n      characters: () => 0,\n      words: () => 0\n    };\n  },\n  onBeforeCreate() {\n    this.storage.characters = options => {\n      const node = (options === null || options === void 0 ? void 0 : options.node) || this.editor.state.doc;\n      const mode = (options === null || options === void 0 ? void 0 : options.mode) || this.options.mode;\n      if (mode === 'textSize') {\n        const text = node.textBetween(0, node.content.size, undefined, ' ');\n        return text.length;\n      }\n      return node.nodeSize;\n    };\n    this.storage.words = options => {\n      const node = (options === null || options === void 0 ? void 0 : options.node) || this.editor.state.doc;\n      const text = node.textBetween(0, node.content.size, ' ', ' ');\n      const words = text.split(' ').filter(word => word !== '');\n      return words.length;\n    };\n  },\n  addProseMirrorPlugins() {\n    return [new Plugin({\n      key: new PluginKey('characterCount'),\n      filterTransaction: (transaction, state) => {\n        const limit = this.options.limit;\n        // Nothing has changed or no limit is defined. Ignore it.\n        if (!transaction.docChanged || limit === 0 || limit === null || limit === undefined) {\n          return true;\n        }\n        const oldSize = this.storage.characters({\n          node: state.doc\n        });\n        const newSize = this.storage.characters({\n          node: transaction.doc\n        });\n        // Everything is in the limit. Good.\n        if (newSize <= limit) {\n          return true;\n        }\n        // The limit has already been exceeded but will be reduced.\n        if (oldSize > limit && newSize > limit && newSize <= oldSize) {\n          return true;\n        }\n        // The limit has already been exceeded and will be increased further.\n        if (oldSize > limit && newSize > limit && newSize > oldSize) {\n          return false;\n        }\n        const isPaste = transaction.getMeta('paste');\n        // Block all exceeding transactions that were not pasted.\n        if (!isPaste) {\n          return false;\n        }\n        // For pasted content, we try to remove the exceeding content.\n        const pos = transaction.selection.$head.pos;\n        const over = newSize - limit;\n        const from = pos - over;\n        const to = pos;\n        // It’s probably a bad idea to mutate transactions within `filterTransaction`\n        // but for now this is working fine.\n        transaction.deleteRange(from, to);\n        // In some situations, the limit will continue to be exceeded after trimming.\n        // This happens e.g. when truncating within a complex node (e.g. table)\n        // and ProseMirror has to close this node again.\n        // If this is the case, we prevent the transaction completely.\n        const updatedSize = this.storage.characters({\n          node: transaction.doc\n        });\n        if (updatedSize > limit) {\n          return false;\n        }\n        return true;\n      }\n    })];\n  }\n});\nexport { CharacterCount, CharacterCount as default };","map":{"version":3,"mappings":"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","names":["Extension","create","name","addOptions","limit","mode","addStorage","characters","words","onBeforeCreate","storage","options","node","editor","state","doc","text","textBetween","content","size","undefined","length","nodeSize","split","filter","word","addProseMirrorPlugins","Plugin","key","PluginKey","filterTransaction","transaction","docChanged","oldSize","newSize","isPaste","getMeta","pos","selection","$head","over","from","to","deleteRange","updatedSize"],"sources":["E:\\0TUser18\\Downloads\\Projects\\Notes App\\client\\node_modules\\@tiptap\\extension-character-count\\src\\character-count.ts"],"sourcesContent":["import { Extension } from '@tiptap/core'\nimport { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Plugin, PluginKey } from 'prosemirror-state'\n\nexport interface CharacterCountOptions {\n  /**\n   * The maximum number of characters that should be allowed. Defaults to `0`.\n   */\n  limit: number | null | undefined,\n  /**\n   * The mode by which the size is calculated. Defaults to 'textSize'.\n   */\n  mode: 'textSize' | 'nodeSize',\n}\n\nexport interface CharacterCountStorage {\n  /**\n   * Get the number of characters for the current document.\n   */\n  characters: (options?: {\n    node?: ProseMirrorNode,\n    mode?: 'textSize' | 'nodeSize',\n  }) => number,\n\n  /**\n   * Get the number of words for the current document.\n   */\n  words: (options?: {\n    node?: ProseMirrorNode,\n  }) => number,\n}\n\nexport const CharacterCount = Extension.create<CharacterCountOptions, CharacterCountStorage>({\n  name: 'characterCount',\n\n  addOptions() {\n    return {\n      limit: null,\n      mode: 'textSize',\n    }\n  },\n\n  addStorage() {\n    return {\n      characters: () => 0,\n      words: () => 0,\n    }\n  },\n\n  onBeforeCreate() {\n    this.storage.characters = options => {\n      const node = options?.node || this.editor.state.doc\n      const mode = options?.mode || this.options.mode\n\n      if (mode === 'textSize') {\n        const text = node.textBetween(0, node.content.size, undefined, ' ')\n\n        return text.length\n      }\n\n      return node.nodeSize\n    }\n\n    this.storage.words = options => {\n      const node = options?.node || this.editor.state.doc\n      const text = node.textBetween(0, node.content.size, ' ', ' ')\n      const words = text\n        .split(' ')\n        .filter(word => word !== '')\n\n      return words.length\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('characterCount'),\n        filterTransaction: (transaction, state) => {\n          const limit = this.options.limit\n\n          // Nothing has changed or no limit is defined. Ignore it.\n          if (!transaction.docChanged || limit === 0 || limit === null || limit === undefined) {\n            return true\n          }\n\n          const oldSize = this.storage.characters({ node: state.doc })\n          const newSize = this.storage.characters({ node: transaction.doc })\n\n          // Everything is in the limit. Good.\n          if (newSize <= limit) {\n            return true\n          }\n\n          // The limit has already been exceeded but will be reduced.\n          if (oldSize > limit && newSize > limit && newSize <= oldSize) {\n            return true\n          }\n\n          // The limit has already been exceeded and will be increased further.\n          if (oldSize > limit && newSize > limit && newSize > oldSize) {\n            return false\n          }\n\n          const isPaste = transaction.getMeta('paste')\n\n          // Block all exceeding transactions that were not pasted.\n          if (!isPaste) {\n            return false\n          }\n\n          // For pasted content, we try to remove the exceeding content.\n          const pos = transaction.selection.$head.pos\n          const over = newSize - limit\n          const from = pos - over\n          const to = pos\n\n          // It’s probably a bad idea to mutate transactions within `filterTransaction`\n          // but for now this is working fine.\n          transaction.deleteRange(from, to)\n\n          // In some situations, the limit will continue to be exceeded after trimming.\n          // This happens e.g. when truncating within a complex node (e.g. table)\n          // and ProseMirror has to close this node again.\n          // If this is the case, we prevent the transaction completely.\n          const updatedSize = this.storage.characters({ node: transaction.doc })\n\n          if (updatedSize > limit) {\n            return false\n          }\n\n          return true\n        },\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}