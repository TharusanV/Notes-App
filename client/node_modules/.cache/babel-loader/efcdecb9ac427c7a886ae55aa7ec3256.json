{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n * @typedef {import('micromark-util-types').State} State\r\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/** @type {Tokenizer} */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`');\n    effects.enter(types.hardBreakEscape);\n    effects.enter(types.escapeMarker);\n    effects.consume(code);\n    return open;\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(types.escapeMarker);\n      effects.exit(types.hardBreakEscape);\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","map":{"version":3,"names":["ok","assert","markdownLineEnding","codes","types","hardBreakEscape","name","tokenize","tokenizeHardBreakEscape","effects","nok","start","code","backslash","enter","escapeMarker","consume","open","exit"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n * @typedef {import('micromark-util-types').State} State\r\n */\r\n\r\nimport {ok as assert} from 'uvu/assert'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\n\r\n/** @type {Construct} */\r\nexport const hardBreakEscape = {\r\n  name: 'hardBreakEscape',\r\n  tokenize: tokenizeHardBreakEscape\r\n}\r\n\r\n/** @type {Tokenizer} */\r\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    assert(code === codes.backslash, 'expected `\\\\`')\r\n    effects.enter(types.hardBreakEscape)\r\n    effects.enter(types.escapeMarker)\r\n    effects.consume(code)\r\n    return open\r\n  }\r\n\r\n  /** @type {State} */\r\n  function open(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.exit(types.escapeMarker)\r\n      effects.exit(types.hardBreakEscape)\r\n      return ok(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,EAAE,IAAIC,MAAM,QAAO,YAAY;AACvC,SAAQC,kBAAkB,QAAO,0BAA0B;AAC3D,SAAQC,KAAK,QAAO,gCAAgC;AACpD,SAAQC,KAAK,QAAO,gCAAgC;;AAEpD;AACA,OAAO,MAAMC,eAAe,GAAG;EAC7BC,IAAI,EAAE,iBAAiB;EACvBC,QAAQ,EAAEC;AACZ,CAAC;;AAED;AACA,SAASA,uBAAuB,CAACC,OAAO,EAAET,EAAE,EAAEU,GAAG,EAAE;EACjD,OAAOC,KAAK;;EAEZ;EACA,SAASA,KAAK,CAACC,IAAI,EAAE;IACnBX,MAAM,CAACW,IAAI,KAAKT,KAAK,CAACU,SAAS,EAAE,eAAe,CAAC;IACjDJ,OAAO,CAACK,KAAK,CAACV,KAAK,CAACC,eAAe,CAAC;IACpCI,OAAO,CAACK,KAAK,CAACV,KAAK,CAACW,YAAY,CAAC;IACjCN,OAAO,CAACO,OAAO,CAACJ,IAAI,CAAC;IACrB,OAAOK,IAAI;EACb;;EAEA;EACA,SAASA,IAAI,CAACL,IAAI,EAAE;IAClB,IAAIV,kBAAkB,CAACU,IAAI,CAAC,EAAE;MAC5BH,OAAO,CAACS,IAAI,CAACd,KAAK,CAACW,YAAY,CAAC;MAChCN,OAAO,CAACS,IAAI,CAACd,KAAK,CAACC,eAAe,CAAC;MACnC,OAAOL,EAAE,CAACY,IAAI,CAAC;IACjB;IAEA,OAAOF,GAAG,CAACE,IAAI,CAAC;EAClB;AACF"},"metadata":{},"sourceType":"module"}