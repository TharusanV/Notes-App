{"ast":null,"code":"/**\r\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\r\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\r\n * @typedef {import('mdast').Parent} Parent\r\n * @typedef {import('mdast').Definition} Definition\r\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} Content\r\n * @typedef {import('unist-util-position').PositionLike} PositionLike\r\n *\r\n * @typedef EmbeddedHastFields\r\n * @property {string} [hName]\r\n *   Defines the tag name of an element.\r\n * @property {Properties} [hProperties]\r\n *   Defines the properties of an element.\r\n * @property {Array<Content>} [hChildren]\r\n *   Defines the (hast) children of an element.\r\n *\r\n * @typedef {Record<string, unknown> & EmbeddedHastFields} Data\r\n *   unist data with embedded hast fields.\r\n *\r\n * @typedef {MdastNode & {data?: Data}} NodeWithData\r\n *   unist node with embedded hast data.\r\n *\r\n * @callback Handler\r\n *   Handle a node.\r\n * @param {H} h\r\n *   Handle context.\r\n * @param {any} node\r\n *   mdast node to handle.\r\n * @param {Parent|null} parent\r\n *   Parent of `node`.\r\n * @returns {Content|Array<Content>|null|undefined}\r\n *   hast node.\r\n *\r\n * @callback HFunctionProps\r\n * @param {MdastNode|PositionLike|null|undefined} node\r\n *   mdast node or unist position.\r\n * @param {string} tagName\r\n *   HTML tag name.\r\n * @param {Properties} props\r\n *   Properties.\r\n * @param {Array<Content>?} [children]\r\n *   hast content.\r\n * @returns {Element}\r\n *   Compiled element.\r\n *\r\n * @callback HFunctionNoProps\r\n * @param {MdastNode|PositionLike|null|undefined} node\r\n *   mdast node or unist position.\r\n * @param {string} tagName\r\n *   HTML tag name.\r\n * @param {Array<Content>?} [children]\r\n *   hast content\r\n * @returns {Element}\r\n *   Compiled element.\r\n *\r\n * @typedef HFields\r\n * @property {boolean} dangerous\r\n *   Whether HTML is allowed.\r\n * @property {string} clobberPrefix\r\n *   Prefix to use to prevent DOM clobbering.\r\n * @property {string} footnoteLabel\r\n *   Label to use to introduce the footnote section.\r\n * @property {string} footnoteLabelTagName\r\n *   HTML used for the footnote label.\r\n * @property {Properties} footnoteLabelProperties\r\n *   Properties on the HTML tag used for the footnote label.\r\n * @property {string} footnoteBackLabel\r\n *   Label to use to go back to a footnote call from the footnote section.\r\n * @property {(identifier: string) => Definition|null} definition\r\n *   Definition cache.\r\n * @property {Record<string, FootnoteDefinition>} footnoteById\r\n *   Footnote cache.\r\n * @property {Array<string>} footnoteOrder\r\n *   Order in which footnotes occur.\r\n * @property {Record<string, number>} footnoteCounts\r\n *   Counts the same footnote was used.\r\n * @property {Handlers} handlers\r\n *   Applied handlers.\r\n * @property {Handler} unknownHandler\r\n *   Handler for any none not in `passThrough` or otherwise handled.\r\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment\r\n *   Like `h` but lower-level and usable on non-elements.\r\n * @property {Array<string>} passThrough\r\n *   List of node types to pass through untouched (except for their children).\r\n *\r\n * @typedef Options\r\n *   Configuration (optional).\r\n * @property {boolean} [allowDangerousHtml=false]\r\n *   Whether to allow `html` nodes and inject them as `raw` HTML.\r\n * @property {string} [clobberPrefix='user-content-']\r\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\r\n *   attributes.\r\n *   DOM clobbering is this:\r\n *\r\n *   ```html\r\n *   <p id=x></p>\r\n *   <script>alert(x)</script>\r\n *   ```\r\n *\r\n *   Elements by their ID are made available in browsers on the `window` object.\r\n *   Using a prefix prevents this from being a problem.\r\n * @property {string} [footnoteLabel='Footnotes']\r\n *   Label to use for the footnotes section.\r\n *   Affects screen reader users.\r\n *   Change it if you’re authoring in a different language.\r\n * @property {string} [footnoteLabelTagName='h2']\r\n *   HTML tag to use for the footnote label.\r\n *   Can be changed to match your document structure and play well with your choice of css.\r\n * @property {Properties} [footnoteLabelProperties={className: ['sr-only']}]\r\n *   Properties to use on the footnote label.\r\n *   A 'sr-only' class is added by default to hide this from sighted users.\r\n *   Change it to make the label visible, or add classes for other purposes.\r\n * @property {string} [footnoteBackLabel='Back to content']\r\n *   Label to use from backreferences back to their footnote call.\r\n *   Affects screen reader users.\r\n *   Change it if you’re authoring in a different language.\r\n * @property {Handlers} [handlers]\r\n *   Object mapping mdast nodes to functions handling them\r\n * @property {Array<string>} [passThrough]\r\n *   List of custom mdast node types to pass through (keep) in hast\r\n * @property {Handler} [unknownHandler]\r\n *   Handler for all unknown nodes.\r\n *\r\n * @typedef {Record<string, Handler>} Handlers\r\n *   Map of node types to handlers\r\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H\r\n *   Handle context\r\n */\n\nimport { u } from 'unist-builder';\nimport { visit } from 'unist-util-visit';\nimport { pointStart, pointEnd } from 'unist-util-position';\nimport { generated } from 'unist-util-generated';\nimport { definitions } from 'mdast-util-definitions';\nimport { one } from './traverse.js';\nimport { footer } from './footer.js';\nimport { handlers } from './handlers/index.js';\nconst own = {}.hasOwnProperty;\n\n/**\r\n * Turn mdast into hast.\r\n *\r\n * @param {MdastNode} tree\r\n *   mdast node.\r\n * @param {Options} [options]\r\n *   Configuration (optional).\r\n * @returns {H}\r\n *   `h` function.\r\n */\nfunction factory(tree, options) {\n  const settings = options || {};\n  const dangerous = settings.allowDangerousHtml || false;\n  /** @type {Record<string, FootnoteDefinition>} */\n  const footnoteById = {};\n  h.dangerous = dangerous;\n  h.clobberPrefix = settings.clobberPrefix === undefined || settings.clobberPrefix === null ? 'user-content-' : settings.clobberPrefix;\n  h.footnoteLabel = settings.footnoteLabel || 'Footnotes';\n  h.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2';\n  h.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  };\n  h.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content';\n  h.definition = definitions(tree);\n  h.footnoteById = footnoteById;\n  /** @type {Array<string>} */\n  h.footnoteOrder = [];\n  /** @type {Record<string, number>} */\n  h.footnoteCounts = {};\n  h.augment = augment;\n  h.handlers = {\n    ...handlers,\n    ...settings.handlers\n  };\n  h.unknownHandler = settings.unknownHandler;\n  h.passThrough = settings.passThrough;\n  visit(tree, 'footnoteDefinition', definition => {\n    const id = String(definition.identifier).toUpperCase();\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition;\n    }\n  });\n\n  // @ts-expect-error Hush, it’s fine!\n  return h;\n\n  /**\r\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\r\n   *\r\n   * @param {(NodeWithData|PositionLike)?} left\r\n   * @param {Content} right\r\n   * @returns {Content}\r\n   */\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      const data = left.data;\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          };\n        }\n        right.tagName = data.hName;\n      }\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {\n          ...right.properties,\n          ...data.hProperties\n        };\n      }\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren;\n      }\n    }\n    if (left) {\n      const ctx = 'type' in left ? left : {\n        position: left\n      };\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {\n          start: pointStart(ctx),\n          end: pointEnd(ctx)\n        };\n      }\n    }\n    return right;\n  }\n\n  /**\r\n   * Create an element for `node`.\r\n   *\r\n   * @type {HFunctionProps}\r\n   */\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props;\n      props = {};\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    });\n  }\n}\n\n/**\r\n * Transform `tree` (an mdast node) to a hast node.\r\n *\r\n * @param {MdastNode} tree mdast node\r\n * @param {Options} [options] Configuration\r\n * @returns {HastNode|null|undefined} hast node\r\n */\nexport function toHast(tree, options) {\n  const h = factory(tree, options);\n  const node = one(h, tree, null);\n  const foot = footer(h);\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot);\n  }\n  return Array.isArray(node) ? {\n    type: 'root',\n    children: node\n  } : node;\n}\nexport { handlers as defaultHandlers } from './handlers/index.js';","map":{"version":3,"names":["u","visit","pointStart","pointEnd","generated","definitions","one","footer","handlers","own","hasOwnProperty","factory","tree","options","settings","dangerous","allowDangerousHtml","footnoteById","h","clobberPrefix","undefined","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","className","footnoteBackLabel","definition","footnoteOrder","footnoteCounts","augment","unknownHandler","passThrough","id","String","identifier","toUpperCase","call","left","right","data","hName","type","tagName","properties","children","hProperties","hChildren","ctx","position","start","end","node","props","Array","isArray","toHast","foot","push","defaultHandlers"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/node_modules/mdast-util-to-hast/lib/index.js"],"sourcesContent":["/**\r\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\r\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\r\n * @typedef {import('mdast').Parent} Parent\r\n * @typedef {import('mdast').Definition} Definition\r\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} Content\r\n * @typedef {import('unist-util-position').PositionLike} PositionLike\r\n *\r\n * @typedef EmbeddedHastFields\r\n * @property {string} [hName]\r\n *   Defines the tag name of an element.\r\n * @property {Properties} [hProperties]\r\n *   Defines the properties of an element.\r\n * @property {Array<Content>} [hChildren]\r\n *   Defines the (hast) children of an element.\r\n *\r\n * @typedef {Record<string, unknown> & EmbeddedHastFields} Data\r\n *   unist data with embedded hast fields.\r\n *\r\n * @typedef {MdastNode & {data?: Data}} NodeWithData\r\n *   unist node with embedded hast data.\r\n *\r\n * @callback Handler\r\n *   Handle a node.\r\n * @param {H} h\r\n *   Handle context.\r\n * @param {any} node\r\n *   mdast node to handle.\r\n * @param {Parent|null} parent\r\n *   Parent of `node`.\r\n * @returns {Content|Array<Content>|null|undefined}\r\n *   hast node.\r\n *\r\n * @callback HFunctionProps\r\n * @param {MdastNode|PositionLike|null|undefined} node\r\n *   mdast node or unist position.\r\n * @param {string} tagName\r\n *   HTML tag name.\r\n * @param {Properties} props\r\n *   Properties.\r\n * @param {Array<Content>?} [children]\r\n *   hast content.\r\n * @returns {Element}\r\n *   Compiled element.\r\n *\r\n * @callback HFunctionNoProps\r\n * @param {MdastNode|PositionLike|null|undefined} node\r\n *   mdast node or unist position.\r\n * @param {string} tagName\r\n *   HTML tag name.\r\n * @param {Array<Content>?} [children]\r\n *   hast content\r\n * @returns {Element}\r\n *   Compiled element.\r\n *\r\n * @typedef HFields\r\n * @property {boolean} dangerous\r\n *   Whether HTML is allowed.\r\n * @property {string} clobberPrefix\r\n *   Prefix to use to prevent DOM clobbering.\r\n * @property {string} footnoteLabel\r\n *   Label to use to introduce the footnote section.\r\n * @property {string} footnoteLabelTagName\r\n *   HTML used for the footnote label.\r\n * @property {Properties} footnoteLabelProperties\r\n *   Properties on the HTML tag used for the footnote label.\r\n * @property {string} footnoteBackLabel\r\n *   Label to use to go back to a footnote call from the footnote section.\r\n * @property {(identifier: string) => Definition|null} definition\r\n *   Definition cache.\r\n * @property {Record<string, FootnoteDefinition>} footnoteById\r\n *   Footnote cache.\r\n * @property {Array<string>} footnoteOrder\r\n *   Order in which footnotes occur.\r\n * @property {Record<string, number>} footnoteCounts\r\n *   Counts the same footnote was used.\r\n * @property {Handlers} handlers\r\n *   Applied handlers.\r\n * @property {Handler} unknownHandler\r\n *   Handler for any none not in `passThrough` or otherwise handled.\r\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment\r\n *   Like `h` but lower-level and usable on non-elements.\r\n * @property {Array<string>} passThrough\r\n *   List of node types to pass through untouched (except for their children).\r\n *\r\n * @typedef Options\r\n *   Configuration (optional).\r\n * @property {boolean} [allowDangerousHtml=false]\r\n *   Whether to allow `html` nodes and inject them as `raw` HTML.\r\n * @property {string} [clobberPrefix='user-content-']\r\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\r\n *   attributes.\r\n *   DOM clobbering is this:\r\n *\r\n *   ```html\r\n *   <p id=x></p>\r\n *   <script>alert(x)</script>\r\n *   ```\r\n *\r\n *   Elements by their ID are made available in browsers on the `window` object.\r\n *   Using a prefix prevents this from being a problem.\r\n * @property {string} [footnoteLabel='Footnotes']\r\n *   Label to use for the footnotes section.\r\n *   Affects screen reader users.\r\n *   Change it if you’re authoring in a different language.\r\n * @property {string} [footnoteLabelTagName='h2']\r\n *   HTML tag to use for the footnote label.\r\n *   Can be changed to match your document structure and play well with your choice of css.\r\n * @property {Properties} [footnoteLabelProperties={className: ['sr-only']}]\r\n *   Properties to use on the footnote label.\r\n *   A 'sr-only' class is added by default to hide this from sighted users.\r\n *   Change it to make the label visible, or add classes for other purposes.\r\n * @property {string} [footnoteBackLabel='Back to content']\r\n *   Label to use from backreferences back to their footnote call.\r\n *   Affects screen reader users.\r\n *   Change it if you’re authoring in a different language.\r\n * @property {Handlers} [handlers]\r\n *   Object mapping mdast nodes to functions handling them\r\n * @property {Array<string>} [passThrough]\r\n *   List of custom mdast node types to pass through (keep) in hast\r\n * @property {Handler} [unknownHandler]\r\n *   Handler for all unknown nodes.\r\n *\r\n * @typedef {Record<string, Handler>} Handlers\r\n *   Map of node types to handlers\r\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H\r\n *   Handle context\r\n */\r\n\r\nimport {u} from 'unist-builder'\r\nimport {visit} from 'unist-util-visit'\r\nimport {pointStart, pointEnd} from 'unist-util-position'\r\nimport {generated} from 'unist-util-generated'\r\nimport {definitions} from 'mdast-util-definitions'\r\nimport {one} from './traverse.js'\r\nimport {footer} from './footer.js'\r\nimport {handlers} from './handlers/index.js'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Turn mdast into hast.\r\n *\r\n * @param {MdastNode} tree\r\n *   mdast node.\r\n * @param {Options} [options]\r\n *   Configuration (optional).\r\n * @returns {H}\r\n *   `h` function.\r\n */\r\nfunction factory(tree, options) {\r\n  const settings = options || {}\r\n  const dangerous = settings.allowDangerousHtml || false\r\n  /** @type {Record<string, FootnoteDefinition>} */\r\n  const footnoteById = {}\r\n\r\n  h.dangerous = dangerous\r\n  h.clobberPrefix =\r\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\r\n      ? 'user-content-'\r\n      : settings.clobberPrefix\r\n  h.footnoteLabel = settings.footnoteLabel || 'Footnotes'\r\n  h.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\r\n  h.footnoteLabelProperties = settings.footnoteLabelProperties || {\r\n    className: ['sr-only']\r\n  }\r\n  h.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\r\n  h.definition = definitions(tree)\r\n  h.footnoteById = footnoteById\r\n  /** @type {Array<string>} */\r\n  h.footnoteOrder = []\r\n  /** @type {Record<string, number>} */\r\n  h.footnoteCounts = {}\r\n  h.augment = augment\r\n  h.handlers = {...handlers, ...settings.handlers}\r\n  h.unknownHandler = settings.unknownHandler\r\n  h.passThrough = settings.passThrough\r\n\r\n  visit(tree, 'footnoteDefinition', (definition) => {\r\n    const id = String(definition.identifier).toUpperCase()\r\n\r\n    // Mimick CM behavior of link definitions.\r\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\r\n    if (!own.call(footnoteById, id)) {\r\n      footnoteById[id] = definition\r\n    }\r\n  })\r\n\r\n  // @ts-expect-error Hush, it’s fine!\r\n  return h\r\n\r\n  /**\r\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\r\n   *\r\n   * @param {(NodeWithData|PositionLike)?} left\r\n   * @param {Content} right\r\n   * @returns {Content}\r\n   */\r\n  function augment(left, right) {\r\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\r\n    if (left && 'data' in left && left.data) {\r\n      /** @type {Data} */\r\n      const data = left.data\r\n\r\n      if (data.hName) {\r\n        if (right.type !== 'element') {\r\n          right = {\r\n            type: 'element',\r\n            tagName: '',\r\n            properties: {},\r\n            children: []\r\n          }\r\n        }\r\n\r\n        right.tagName = data.hName\r\n      }\r\n\r\n      if (right.type === 'element' && data.hProperties) {\r\n        right.properties = {...right.properties, ...data.hProperties}\r\n      }\r\n\r\n      if ('children' in right && right.children && data.hChildren) {\r\n        right.children = data.hChildren\r\n      }\r\n    }\r\n\r\n    if (left) {\r\n      const ctx = 'type' in left ? left : {position: left}\r\n\r\n      if (!generated(ctx)) {\r\n        // @ts-expect-error: fine.\r\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\r\n      }\r\n    }\r\n\r\n    return right\r\n  }\r\n\r\n  /**\r\n   * Create an element for `node`.\r\n   *\r\n   * @type {HFunctionProps}\r\n   */\r\n  function h(node, tagName, props, children) {\r\n    if (Array.isArray(props)) {\r\n      children = props\r\n      props = {}\r\n    }\r\n\r\n    // @ts-expect-error augmenting an element yields an element.\r\n    return augment(node, {\r\n      type: 'element',\r\n      tagName,\r\n      properties: props || {},\r\n      children: children || []\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Transform `tree` (an mdast node) to a hast node.\r\n *\r\n * @param {MdastNode} tree mdast node\r\n * @param {Options} [options] Configuration\r\n * @returns {HastNode|null|undefined} hast node\r\n */\r\nexport function toHast(tree, options) {\r\n  const h = factory(tree, options)\r\n  const node = one(h, tree, null)\r\n  const foot = footer(h)\r\n\r\n  if (foot) {\r\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\r\n    // content.\r\n    // So assume `node` is a parent node.\r\n    node.children.push(u('text', '\\n'), foot)\r\n  }\r\n\r\n  return Array.isArray(node) ? {type: 'root', children: node} : node\r\n}\r\n\r\nexport {handlers as defaultHandlers} from './handlers/index.js'\r\n"],"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"},"metadata":{},"sourceType":"module"}