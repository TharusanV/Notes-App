{"ast":null,"code":"import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core';\nconst inputRegex = /^(\\d+)\\.\\s$/;\nconst OrderedList = Node.create({\n  name: 'orderedList',\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {}\n    };\n  },\n  group: 'block list',\n  content() {\n    return `${this.options.itemTypeName}+`;\n  },\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => {\n          return element.hasAttribute('start') ? parseInt(element.getAttribute('start') || '', 10) : 1;\n        }\n      }\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'ol'\n    }];\n  },\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    const {\n      start,\n      ...attributesWithoutStart\n    } = HTMLAttributes;\n    return start === 1 ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0] : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      toggleOrderedList: () => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.toggleList(this.name, this.options.itemTypeName);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList()\n    };\n  },\n  addInputRules() {\n    return [wrappingInputRule({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: match => ({\n        start: +match[1]\n      }),\n      joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1]\n    })];\n  }\n});\nexport { OrderedList, OrderedList as default, inputRegex };","map":{"version":3,"mappings":";AAkBO,MAAMA,UAAU,GAAG;AAEb,iBAAW,GAAGC,IAAI,CAACC,MAAM,CAAqB;EACzDC,IAAI,EAAE,aAAa;EAEnBC,UAAU;IACR,OAAO;MACLC,YAAY,EAAE,UAAU;MACxBC,cAAc,EAAE;KACjB;GACF;EAEDC,KAAK,EAAE,YAAY;EAEnBC,OAAO;IACL,OAAO,GAAG,IAAI,CAACC,OAAO,CAACJ,YAAY,GAAG;GACvC;EAEDK,aAAa;IACX,OAAO;MACLC,KAAK,EAAE;QACLC,OAAO,EAAE,CAAC;QACVC,SAAS,EAAEC,OAAO,IAAG;UACnB,OAAOA,OAAO,CAACC,YAAY,CAAC,OAAO,CAAC,GAChCC,QAAQ,CAACF,OAAO,CAACG,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,GACjD,CAAC;;MAER;KACF;GACF;EAEDJ,SAAS;IACP,OAAO,CACL;MACEK,GAAG,EAAE;IACN,EACF;GACF;EAEDC,UAAU,OAAmB;IAAA,IAAlB;MAAEb;IAAc,CAAE;IAC3B,MAAM;MAAEK,KAAK;MAAE,GAAGS;IAAsB,CAAE,GAAGd,cAAc;IAE3D,OAAOK,KAAK,KAAK,CAAC,GACd,CAAC,IAAI,EAAEU,eAAe,CAAC,IAAI,CAACZ,OAAO,CAACH,cAAc,EAAEc,sBAAsB,CAAC,EAAE,CAAC,CAAC,GAC/E,CAAC,IAAI,EAAEC,eAAe,CAAC,IAAI,CAACZ,OAAO,CAACH,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GAC5E;EAEDgB,WAAW;IACT,OAAO;MACLC,iBAAiB,EAAE,MAAM,SAAiB;QAAA,IAAhB;UAAEC;QAAQ,CAAE;QACpC,OAAOA,QAAQ,CAACC,UAAU,CAAC,IAAI,CAACtB,IAAI,EAAE,IAAI,CAACM,OAAO,CAACJ,YAAY,CAAC;;KAEnE;GACF;EAEDqB,oBAAoB;IAClB,OAAO;MACL,aAAa,EAAE,MAAM,IAAI,CAACC,MAAM,CAACH,QAAQ,CAACD,iBAAiB;KAC5D;GACF;EAEDK,aAAa;IACX,OAAO,CACLC,iBAAiB,CAAC;MAChBC,IAAI,EAAE9B,UAAU;MAChB+B,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,aAAa,EAAEC,KAAK,KAAK;QAAEtB,KAAK,EAAE,CAACsB,KAAK,CAAC,CAAC;MAAC,CAAE,CAAC;MAC9CC,aAAa,EAAE,CAACD,KAAK,EAAEE,IAAI,KAAKA,IAAI,CAACC,UAAU,GAAGD,IAAI,CAACE,KAAK,CAAC1B,KAAK,KAAK,CAACsB,KAAK,CAAC,CAAC;KAChF,CAAC,CACH;;AAEJ","names":["inputRegex","Node","create","name","addOptions","itemTypeName","HTMLAttributes","group","content","options","addAttributes","start","default","parseHTML","element","hasAttribute","parseInt","getAttribute","tag","renderHTML","attributesWithoutStart","mergeAttributes","addCommands","toggleOrderedList","commands","toggleList","addKeyboardShortcuts","editor","addInputRules","wrappingInputRule","find","type","getAttributes","match","joinPredicate","node","childCount","attrs"],"sources":["E:\\0TUser18\\Downloads\\Projects\\Notes App\\client\\node_modules\\@tiptap\\extension-ordered-list\\src\\ordered-list.ts"],"sourcesContent":["import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nexport interface OrderedListOptions {\n  itemTypeName: string,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    orderedList: {\n      /**\n       * Toggle an ordered list\n       */\n      toggleOrderedList: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /^(\\d+)\\.\\s$/\n\nexport const OrderedList = Node.create<OrderedListOptions>({\n  name: 'orderedList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => {\n          return element.hasAttribute('start')\n            ? parseInt(element.getAttribute('start') || '', 10)\n            : 1\n        },\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'ol',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const { start, ...attributesWithoutStart } = HTMLAttributes\n\n    return start === 1\n      ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]\n      : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleOrderedList: () => ({ commands }) => {\n        return commands.toggleList(this.name, this.options.itemTypeName)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        getAttributes: match => ({ start: +match[1] }),\n        joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}