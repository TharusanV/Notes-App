{"ast":null,"code":"var _jsxFileName = \"E:\\\\0TUser18\\\\Downloads\\\\Projects\\\\Notes App\\\\client\\\\src\\\\components\\\\ToolBar.jsx\";\nimport UndoIcon from '@mui/icons-material/Undo';\nimport RedoIcon from '@mui/icons-material/Redo';\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\nimport FormatListNumberedIcon from '@mui/icons-material/FormatListNumbered';\nimport FormatUnderlinedIcon from '@mui/icons-material/FormatUnderlined';\nimport FormatBoldIcon from '@mui/icons-material/FormatBold';\nimport FormatItalicIcon from '@mui/icons-material/FormatItalic';\nimport FormatQuoteIcon from '@mui/icons-material/FormatQuote';\nimport HorizontalRuleIcon from '@mui/icons-material/HorizontalRule';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet optionsButtons = document.querySelectorAll(\".option-button\");\nlet advancedOptionButton = document.querySelectorAll(\".adv-option-button\");\nlet fontName = document.getElementById(\"fontName\");\nlet fontSizeRef = document.getElementById(\"fontSize\");\nlet writingArea = document.getElementById(\"text-input\");\nlet linkButton = document.getElementById(\"createLink\");\nlet alignButtons = document.querySelectorAll(\".align\");\nlet spacingButtons = document.querySelectorAll(\".spacing\");\nlet formatButtons = document.querySelectorAll(\".format\");\nlet scriptButtons = document.querySelectorAll(\".script\");\n//List of fontlist\nlet fontList = [\"Arial\", \"Verdana\", \"Times New Roman\", \"Garamond\", \"Georgia\", \"Courier New\", \"cursive\"];\n//Initial Settings\nconst initializer = () => {\n  //function calls for highlighting buttons\n  //No highlights for link, unlink,lists, undo,redo since they are one time operations\n  highlighter(alignButtons, true);\n  highlighter(spacingButtons, true);\n  highlighter(formatButtons, false);\n  highlighter(scriptButtons, true);\n  //create options for font names\n  fontList.map(value => {\n    let option = document.createElement(\"option\");\n    option.value = value;\n    option.innerHTML = value;\n    fontName.appendChild(option);\n  });\n  //fontSize allows only till 7\n  for (let i = 1; i <= 7; i++) {\n    let option = document.createElement(\"option\");\n    option.value = i;\n    option.innerHTML = i;\n    fontSizeRef.appendChild(option);\n  }\n  //default size\n  fontSizeRef.value = 3;\n};\n//main logic\nconst modifyText = (command, defaultUi, value) => {\n  //execCommand executes command on selected text\n  document.execCommand(command, defaultUi, value);\n};\n//For basic operations which don't need value parameter\noptionsButtons.forEach(button => {\n  button.addEventListener(\"click\", () => {\n    modifyText(button.id, false, null);\n  });\n});\n//options that require value parameter (e.g colors, fonts)\nadvancedOptionButton.forEach(button => {\n  button.addEventListener(\"change\", () => {\n    modifyText(button.id, false, button.value);\n  });\n});\n//link\nlinkButton.addEventListener(\"click\", () => {\n  let userLink = prompt(\"Enter a URL\");\n  //if link has http then pass directly else add https\n  if (/http/i.test(userLink)) {\n    modifyText(linkButton.id, false, userLink);\n  } else {\n    userLink = \"http://\" + userLink;\n    modifyText(linkButton.id, false, userLink);\n  }\n});\n//Highlight clicked button\nconst highlighter = (className, needsRemoval) => {\n  className.forEach(button => {\n    button.addEventListener(\"click\", () => {\n      //needsRemoval = true means only one button should be highlight and other would be normal\n      if (needsRemoval) {\n        let alreadyActive = false;\n        //If currently clicked button is already active\n        if (button.classList.contains(\"active\")) {\n          alreadyActive = true;\n        }\n        //Remove highlight from other buttons\n        highlighterRemover(className);\n        if (!alreadyActive) {\n          //highlight clicked button\n          button.classList.add(\"active\");\n        }\n      } else {\n        //if other buttons can be highlighted\n        button.classList.toggle(\"active\");\n      }\n    });\n  });\n};\nconst highlighterRemover = className => {\n  className.forEach(button => {\n    button.classList.remove(\"active\");\n  });\n};\nwindow.onload = initializer();\nconst Toolbar = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"toolbar\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"bold\",\n      className: \"option-button format\",\n      children: /*#__PURE__*/_jsxDEV(FormatBoldIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_c = Toolbar;\nexport default Toolbar;\nvar _c;\n$RefreshReg$(_c, \"Toolbar\");","map":{"version":3,"names":["UndoIcon","RedoIcon","FormatListBulletedIcon","FormatListNumberedIcon","FormatUnderlinedIcon","FormatBoldIcon","FormatItalicIcon","FormatQuoteIcon","HorizontalRuleIcon","useState","optionsButtons","document","querySelectorAll","advancedOptionButton","fontName","getElementById","fontSizeRef","writingArea","linkButton","alignButtons","spacingButtons","formatButtons","scriptButtons","fontList","initializer","highlighter","map","value","option","createElement","innerHTML","appendChild","i","modifyText","command","defaultUi","execCommand","forEach","button","addEventListener","id","userLink","prompt","test","className","needsRemoval","alreadyActive","classList","contains","highlighterRemover","add","toggle","remove","window","onload","Toolbar"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/src/components/ToolBar.jsx"],"sourcesContent":["import UndoIcon from '@mui/icons-material/Undo';\r\nimport RedoIcon from '@mui/icons-material/Redo';\r\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\r\nimport FormatListNumberedIcon from '@mui/icons-material/FormatListNumbered';\r\nimport FormatUnderlinedIcon from '@mui/icons-material/FormatUnderlined';\r\nimport FormatBoldIcon from '@mui/icons-material/FormatBold';\r\nimport FormatItalicIcon from '@mui/icons-material/FormatItalic';\r\nimport FormatQuoteIcon from '@mui/icons-material/FormatQuote';\r\nimport HorizontalRuleIcon from '@mui/icons-material/HorizontalRule';\r\n\r\nimport { useState } from 'react';\r\n\r\nlet optionsButtons = document.querySelectorAll(\".option-button\");\r\nlet advancedOptionButton = document.querySelectorAll(\".adv-option-button\");\r\nlet fontName = document.getElementById(\"fontName\");\r\nlet fontSizeRef = document.getElementById(\"fontSize\");\r\nlet writingArea = document.getElementById(\"text-input\");\r\nlet linkButton = document.getElementById(\"createLink\");\r\nlet alignButtons = document.querySelectorAll(\".align\");\r\nlet spacingButtons = document.querySelectorAll(\".spacing\");\r\nlet formatButtons = document.querySelectorAll(\".format\");\r\nlet scriptButtons = document.querySelectorAll(\".script\");\r\n//List of fontlist\r\nlet fontList = [\r\n  \"Arial\",\r\n  \"Verdana\",\r\n  \"Times New Roman\",\r\n  \"Garamond\",\r\n  \"Georgia\",\r\n  \"Courier New\",\r\n  \"cursive\",\r\n];\r\n//Initial Settings\r\nconst initializer = () => {\r\n  //function calls for highlighting buttons\r\n  //No highlights for link, unlink,lists, undo,redo since they are one time operations\r\n  highlighter(alignButtons, true);\r\n  highlighter(spacingButtons, true);\r\n  highlighter(formatButtons, false);\r\n  highlighter(scriptButtons, true);\r\n  //create options for font names\r\n  fontList.map((value) => {\r\n    let option = document.createElement(\"option\");\r\n    option.value = value;\r\n    option.innerHTML = value;\r\n    fontName.appendChild(option);\r\n  });\r\n  //fontSize allows only till 7\r\n  for (let i = 1; i <= 7; i++) {\r\n    let option = document.createElement(\"option\");\r\n    option.value = i;\r\n    option.innerHTML = i;\r\n    fontSizeRef.appendChild(option);\r\n  }\r\n  //default size\r\n  fontSizeRef.value = 3;\r\n};\r\n//main logic\r\nconst modifyText = (command, defaultUi, value) => {\r\n  //execCommand executes command on selected text\r\n  document.execCommand(command, defaultUi, value);\r\n};\r\n//For basic operations which don't need value parameter\r\noptionsButtons.forEach((button) => {\r\n  button.addEventListener(\"click\", () => {\r\n    modifyText(button.id, false, null);\r\n  });\r\n});\r\n//options that require value parameter (e.g colors, fonts)\r\nadvancedOptionButton.forEach((button) => {\r\n  button.addEventListener(\"change\", () => {\r\n    modifyText(button.id, false, button.value);\r\n  });\r\n});\r\n//link\r\nlinkButton.addEventListener(\"click\", () => {\r\n  let userLink = prompt(\"Enter a URL\");\r\n  //if link has http then pass directly else add https\r\n  if (/http/i.test(userLink)) {\r\n    modifyText(linkButton.id, false, userLink);\r\n  } else {\r\n    userLink = \"http://\" + userLink;\r\n    modifyText(linkButton.id, false, userLink);\r\n  }\r\n});\r\n//Highlight clicked button\r\nconst highlighter = (className, needsRemoval) => {\r\n  className.forEach((button) => {\r\n    button.addEventListener(\"click\", () => {\r\n      //needsRemoval = true means only one button should be highlight and other would be normal\r\n      if (needsRemoval) {\r\n        let alreadyActive = false;\r\n        //If currently clicked button is already active\r\n        if (button.classList.contains(\"active\")) {\r\n          alreadyActive = true;\r\n        }\r\n        //Remove highlight from other buttons\r\n        highlighterRemover(className);\r\n        if (!alreadyActive) {\r\n          //highlight clicked button\r\n          button.classList.add(\"active\");\r\n        }\r\n      } else {\r\n        //if other buttons can be highlighted\r\n        button.classList.toggle(\"active\");\r\n      }\r\n    });\r\n  });\r\n};\r\nconst highlighterRemover = (className) => {\r\n  className.forEach((button) => {\r\n    button.classList.remove(\"active\");\r\n  });\r\n};\r\nwindow.onload = initializer();\r\n\r\nconst Toolbar = () => {\r\n\r\n  return (\r\n    <div className='toolbar'>\r\n        <button id=\"bold\" className=\"option-button format\">\r\n          <FormatBoldIcon/>\r\n        </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Toolbar\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}