{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').State} State\r\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n\n/**\r\n * @this {TokenizeContext}\r\n * @param {Effects} effects\r\n * @param {State} ok\r\n * @param {State} nok\r\n * @param {string} type\r\n * @param {string} markerType\r\n * @param {string} stringType\r\n * @returns {State}\r\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`');\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /** @type {State} */\n  function atBreak(code) {\n    if (code === codes.eof || code === codes.leftSquareBracket || code === codes.rightSquareBracket && !data ||\n    /* To do: remove in the future once we’ve switched from\r\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\r\n     * which doesn’t need this */\n    /* Hidden footnotes hook */\n    /* c8 ignore next 3 */\n    code === codes.caret && !size && '_hiddenFootnoteSupport' in self.parser.constructs || size > constants.linkReferenceSizeMax) {\n      return nok(code);\n    }\n    if (code === codes.rightSquareBracket) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      return atBreak;\n    }\n    effects.enter(types.chunkString, {\n      contentType: constants.contentTypeString\n    });\n    return label(code);\n  }\n\n  /** @type {State} */\n  function label(code) {\n    if (code === codes.eof || code === codes.leftSquareBracket || code === codes.rightSquareBracket || markdownLineEnding(code) || size++ > constants.linkReferenceSizeMax) {\n      effects.exit(types.chunkString);\n      return atBreak(code);\n    }\n    effects.consume(code);\n    data = data || !markdownSpace(code);\n    return code === codes.backslash ? labelEscape : label;\n  }\n\n  /** @type {State} */\n  function labelEscape(code) {\n    if (code === codes.leftSquareBracket || code === codes.backslash || code === codes.rightSquareBracket) {\n      effects.consume(code);\n      size++;\n      return label;\n    }\n    return label(code);\n  }\n}","map":{"version":3,"names":["ok","assert","markdownLineEnding","markdownSpace","codes","constants","types","factoryLabel","effects","nok","type","markerType","stringType","self","size","data","start","code","leftSquareBracket","enter","consume","exit","atBreak","eof","rightSquareBracket","caret","parser","constructs","linkReferenceSizeMax","lineEnding","chunkString","contentType","contentTypeString","label","backslash","labelEscape"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/node_modules/micromark-factory-label/dev/index.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').State} State\r\n */\r\n\r\nimport {ok as assert} from 'uvu/assert'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @param {Effects} effects\r\n * @param {State} ok\r\n * @param {State} nok\r\n * @param {string} type\r\n * @param {string} markerType\r\n * @param {string} stringType\r\n * @returns {State}\r\n */\r\n// eslint-disable-next-line max-params\r\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\r\n  const self = this\r\n  let size = 0\r\n  /** @type {boolean} */\r\n  let data\r\n\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    assert(code === codes.leftSquareBracket, 'expected `[`')\r\n    effects.enter(type)\r\n    effects.enter(markerType)\r\n    effects.consume(code)\r\n    effects.exit(markerType)\r\n    effects.enter(stringType)\r\n    return atBreak\r\n  }\r\n\r\n  /** @type {State} */\r\n  function atBreak(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.leftSquareBracket ||\r\n      (code === codes.rightSquareBracket && !data) ||\r\n      /* To do: remove in the future once we’ve switched from\r\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\r\n       * which doesn’t need this */\r\n      /* Hidden footnotes hook */\r\n      /* c8 ignore next 3 */\r\n      (code === codes.caret &&\r\n        !size &&\r\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\r\n      size > constants.linkReferenceSizeMax\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.exit(stringType)\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return atBreak\r\n    }\r\n\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return label(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function label(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.leftSquareBracket ||\r\n      code === codes.rightSquareBracket ||\r\n      markdownLineEnding(code) ||\r\n      size++ > constants.linkReferenceSizeMax\r\n    ) {\r\n      effects.exit(types.chunkString)\r\n      return atBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    data = data || !markdownSpace(code)\r\n    return code === codes.backslash ? labelEscape : label\r\n  }\r\n\r\n  /** @type {State} */\r\n  function labelEscape(code) {\r\n    if (\r\n      code === codes.leftSquareBracket ||\r\n      code === codes.backslash ||\r\n      code === codes.rightSquareBracket\r\n    ) {\r\n      effects.consume(code)\r\n      size++\r\n      return label\r\n    }\r\n\r\n    return label(code)\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}