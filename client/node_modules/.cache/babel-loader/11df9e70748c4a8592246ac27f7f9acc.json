{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n * @typedef {import('micromark-util-types').State} State\r\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { types } from 'micromark-util-symbol/types.js';\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/** @type {Tokenizer} */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    assert(markdownLineEnding(code), 'expected eol');\n    effects.enter(types.lineEnding);\n    effects.consume(code);\n    effects.exit(types.lineEnding);\n    return factorySpace(effects, ok, types.linePrefix);\n  }\n}","map":{"version":3,"names":["ok","assert","factorySpace","markdownLineEnding","types","lineEnding","name","tokenize","tokenizeLineEnding","effects","start","code","enter","consume","exit","linePrefix"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/node_modules/micromark-core-commonmark/dev/lib/line-ending.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n * @typedef {import('micromark-util-types').State} State\r\n */\r\n\r\nimport {ok as assert} from 'uvu/assert'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\n\r\n/** @type {Construct} */\r\nexport const lineEnding = {name: 'lineEnding', tokenize: tokenizeLineEnding}\r\n\r\n/** @type {Tokenizer} */\r\nfunction tokenizeLineEnding(effects, ok) {\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return factorySpace(effects, ok, types.linePrefix)\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,EAAE,IAAIC,MAAM,QAAO,YAAY;AACvC,SAAQC,YAAY,QAAO,yBAAyB;AACpD,SAAQC,kBAAkB,QAAO,0BAA0B;AAC3D,SAAQC,KAAK,QAAO,gCAAgC;;AAEpD;AACA,OAAO,MAAMC,UAAU,GAAG;EAACC,IAAI,EAAE,YAAY;EAAEC,QAAQ,EAAEC;AAAkB,CAAC;;AAE5E;AACA,SAASA,kBAAkB,CAACC,OAAO,EAAET,EAAE,EAAE;EACvC,OAAOU,KAAK;;EAEZ;EACA,SAASA,KAAK,CAACC,IAAI,EAAE;IACnBV,MAAM,CAACE,kBAAkB,CAACQ,IAAI,CAAC,EAAE,cAAc,CAAC;IAChDF,OAAO,CAACG,KAAK,CAACR,KAAK,CAACC,UAAU,CAAC;IAC/BI,OAAO,CAACI,OAAO,CAACF,IAAI,CAAC;IACrBF,OAAO,CAACK,IAAI,CAACV,KAAK,CAACC,UAAU,CAAC;IAC9B,OAAOH,YAAY,CAACO,OAAO,EAAET,EAAE,EAAEI,KAAK,CAACW,UAAU,CAAC;EACpD;AACF"},"metadata":{},"sourceType":"module"}