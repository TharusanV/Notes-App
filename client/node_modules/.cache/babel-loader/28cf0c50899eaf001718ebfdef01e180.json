{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n/**\r\n * @param {Effects} effects\r\n * @param {State} ok\r\n * @param {string} type\r\n * @param {number} [max=Infinity]\r\n * @returns {State}\r\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","map":{"version":3,"names":["markdownSpace","factorySpace","effects","ok","type","max","limit","Number","POSITIVE_INFINITY","size","start","code","enter","prefix","consume","exit"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/node_modules/micromark-factory-space/dev/index.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n */\r\n\r\nimport {markdownSpace} from 'micromark-util-character'\r\n\r\n/**\r\n * @param {Effects} effects\r\n * @param {State} ok\r\n * @param {string} type\r\n * @param {number} [max=Infinity]\r\n * @returns {State}\r\n */\r\nexport function factorySpace(effects, ok, type, max) {\r\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\r\n  let size = 0\r\n\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter(type)\r\n      return prefix(code)\r\n    }\r\n\r\n    return ok(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function prefix(code) {\r\n    if (markdownSpace(code) && size++ < limit) {\r\n      effects.consume(code)\r\n      return prefix\r\n    }\r\n\r\n    effects.exit(type)\r\n    return ok(code)\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAAQA,aAAa,QAAO,0BAA0B;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAY,CAACC,OAAO,EAAEC,EAAE,EAAEC,IAAI,EAAEC,GAAG,EAAE;EACnD,MAAMC,KAAK,GAAGD,GAAG,GAAGA,GAAG,GAAG,CAAC,GAAGE,MAAM,CAACC,iBAAiB;EACtD,IAAIC,IAAI,GAAG,CAAC;EAEZ,OAAOC,KAAK;;EAEZ;EACA,SAASA,KAAK,CAACC,IAAI,EAAE;IACnB,IAAIX,aAAa,CAACW,IAAI,CAAC,EAAE;MACvBT,OAAO,CAACU,KAAK,CAACR,IAAI,CAAC;MACnB,OAAOS,MAAM,CAACF,IAAI,CAAC;IACrB;IAEA,OAAOR,EAAE,CAACQ,IAAI,CAAC;EACjB;;EAEA;EACA,SAASE,MAAM,CAACF,IAAI,EAAE;IACpB,IAAIX,aAAa,CAACW,IAAI,CAAC,IAAIF,IAAI,EAAE,GAAGH,KAAK,EAAE;MACzCJ,OAAO,CAACY,OAAO,CAACH,IAAI,CAAC;MACrB,OAAOE,MAAM;IACf;IAEAX,OAAO,CAACa,IAAI,CAACX,IAAI,CAAC;IAClB,OAAOD,EAAE,CAACQ,IAAI,CAAC;EACjB;AACF"},"metadata":{},"sourceType":"module"}